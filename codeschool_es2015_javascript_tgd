array.find

array.find returns the first element in an array that
satisfies a provided testing function


console.log(Object.keys(totalReplies));lexical scoping and arrow functions 

arrow functions bind to the scope of where they are defined, not where they
are used. aka lexical scoping. 

arrow functions have lexical binding

function(data) {
let tags = data.tags;

}

(data) => {

}

for..of loops

The for...of loop iterates over property values, and it is 
a better way of looping over arrays and other iterable objects

The for...of construct cannot be used to iterate over properties in plain js objects
straight out of the box! 

In order to work with for...of, an object needs a special
function assigned to the Symbol.iterator property. The
presence of this property allows us to know whether an
object is iterable. 

console.log(typeof names[Symbol.iterator]); 

object.assign
The object.assign method copies properties from one or more
source objects to a target object specified as the first argument.

In the case of duplicate properties on source objects, the value from
the last object on the chain always pervails

function countdownTimer(target,timeLeft, options ={}) {
	
	let defaults = {
	}
	
	let settings = Object.assign({}, defaults, options)
}

Maps
The map object is a simple key/value data structure.
Any value may be used as either a key or value, and 
objects are NOT converted to strings. 
Maps are iterable, so may be used with for...of loop

a WeakMap is a type of data structure where only
objects may be used as strings.

weak maps are not iterable. But they are better with
memory.

Arrays do not enforce uniqueness of items

 Sets store unique values of any type, whether primitive
 values or object refs. 
 
 let tags = new Set();
 
tags.add("Javascript");
tags.add("Programming");
tags.add("Web");
tags.add("Web"); 

console.log("Total items: " tags.size) // 3

Set objects ARE iterable. 

for (let tag  of tags) {
    console.log(tag);
}

let [a,b,c,d] = tags;
console.log(a,b,c,d); 

A weak Set is a type of Set where only objects are 
allowed to be stored. A more memory efficient
type of Set. 

let weakTags = new WeakSet();
weakTags.add("JavaScript") // TypeError!!

weakTags.add({name: "JavaScript});
let iOS = {name: "iOS"};
weakTags.add(iOS); 

WeakSets gives us two more methods to use:

weakTags.has(iOS);
weakTags.delete(iOS); 

Weak sets allow garbage collection to be used when
entries are not being used anywhere else in the system.

Weak sets CANNOT be used with for...of,
and they offer no methods for reading values 
from it. 
If we cannot read values from weakSets when can
we use them. 
use weak sets to show unread posts.. 

We can use WeakSets to create special groups
from existing objects without mutating them.
Favouring immutable objects allows for much
simpler code with no unexpected side effects. 

For example, each time a reader reads a post,
add object to a WeakSet called readPosts. 

let readPosts = new WeakSet();

//... when post is clicked only
postList.addEventListener('click, (event) => {
   readPosts.add(post);
}

// ...rendering posts

for(let post of postArray) {

  if(let post of postArray) {
    of(!readPosts.has(post)) {
	  _addNewPostClass(post.element); 
	}
  }

 So while we cannot read values from WeakSets,
 we can use them to create groups of objects and
then later check for the presence of those objects
in the group. 

Classes
A common approach to encapsulation in JS is
using a constructor function

function SponsorWidget(name, description,url) {

this.name = name;
this.description = description;
this.url = url;
}

assign function args to instance properties of
the same name. 

Then have render function. Best way to add to
SponsorWidget is via its prototype 

SponsorWidget.prototype.render = function () {
   
}

Invoke as follows

let sponsorWidget = new SponsorWidget(name,description, url);
sponsorWidget.render();

Better way with new Class syntax. Can write 
what looks like OO code in JS. 

To defie a class, use Class keyword, followed by
the name of the class. The body of the class is
between curly braces. 

def SponsorWidget {
   render() {
   
   }
}

Method definitions in classes look just like in
objects. 

The constuctor method is a special method for
creating and initializing an object. 

class SponsorWidget {

constructor(name, description, url) {
  this.name = name;
  this.description = description;
  this.url = url; 
}

render () {

}
  
}

Constructor runs every time a new instance is
created with the new operator

Assigning to instance variables makes them 
accessible to other instance methods. 

let sponsorWidget = new SponsorWidget(name, description,
url);

sponsorWidget.render(); 

Instance variables set on the constructor method
can be accessed from all other instance methods
in the class. 

Don't forget to use 'this' to access instance
properties and methods. 

Currently, there are NO access modifiers in JS,
like 'private' and 'protected'. 
Prefixing a method with underscore is just a
popular convention to indicate that a method
should not be called from its public API

 The Class syntax is NOT introducting a new object
 model to JS. It's just syntactical sugar
 over the Prototype based inheritance. 
 
 One benefit of Class, is that we can use
inheritance to reduce code repetition. 
 Child classes inherit and specialize code
 defined in parent classes
 
 To create a subclass, use extends keyword which
 causes a class to inherit methods and properties
 from another class. 
 The super method runs the constructor function
 from the parent class.  
 
 //Parent Class
 
 class Widget {
    constructor() {
	  this.baseCSS="site-widget";
	}
	
	parse(value) {
	}; 
 }
 
class SponsorWidget extends Widget {

constructor (name, description, url) {
  super();
}

render() {
  let parsedName=this.parse(this.name);
  let css = this._buildCSS(this.baseCSS);
}

}

All child classed must call super method as
first line in constructor. 

Outside constructor method, super may be used,
but as an object. It hold a ref to object from
the base class. Can use to call parent version
of a method. (such as parse()) 

Promises
Need to know how to work with JS's single-thread
model. 

synchronous code

synchronous style functions wait for return
values 

let results = getPollResultsFromServer("Sass vs Less");
ui.renderSidebar(results); 

Non-blocking code
Asynchronous style functions pass callbacks:

getPollResultsFromServer("Sass vs Less", 
    function (results) {
	
	ui.renderSidebar(results);
	}); 

Continuation passing style (CPS) async programming,
we tell a function how to continue execution by 
passing callbacks. It can grow to complicated
nested code. 

Promises is a new abstraction that allows us to
write async code in an easier way.  

getPollResultsFromServer("Sass vs Less")
  .then(ui.renderSidebar)
  .then(sendNotificationToServer)
  .then(doSomethingElseNonBlocking)
  .catch(function() {
    console.log("Error: ", error);
});

The promise constructor function takes an anonymous
function with 2 callback arguments known as handlers

function getPollResultsFromServer(pollName) {
 
   return new Promise(function(solve,reject) {
   
   resolve(someValue);
   
   reject(someValue);
   });

}

The life cycle of a Promise Object

Creating a new promise auto sets it to the pending
state. Then, it can do 2 things. It cab be
fulfilled or rejected. 

A promise does not return a result. 
It returns a future value, such as the
eventual result of an async operation.

let fetchinResults = getPollResultsFromServer("Sass vs Less");

fetchingResults is NOT the actual result
BUT a promise object.
Note also that no longer need to pass 
a callback as second argument. 

Let's wrap the XMLHttpRequest object API 
within a Promise.  Calling the resolve()
handler moves the promise to a fulfilled
state.

function getPollResultsFromServer() {

  return new Promise(
    function(resolve, reject) {
      let url = `/results/${poll}name`;
	  let request = new XMLHttpRequest();
	  request.open('GET, url, true);
	  request.onload = function () {
	    if(request.status >=200 && request.status < 400) {
	      resolve(JSON.parse(request.response));
	    } //end if
	  } //end function
	  
	  request.send;
     
  });
  
  }

We can use the 'then' method to read results from the promise
once it has been resolved. This method takes a function that
will only be resolved when the Promise is resolved. 

let fetchingResults=getPollResultsFromServer("Sass vs. Less");
fetchingResults.then(function(results) {
  ui.renderSidebar(results);
});

better to get rid of temp variables

getPollResultsFromServer("Sass vs. Less")
 .then(function(results) {
  ui.renderSidebar(results);
});

Iterators
Iterables return an iterator object. 
This object knows how to access items from a 
collection one at a time, while keeping track
of its current position within the sequence

Generators

The function * declaration defines generator
functions.  These are special functions from
which we can used the 'yield' keyword to 
return iterator objects. 

function * nameList () {
  yield "Sam";
  yield "Tyler"; 
}

arguments passed to yield are auto assigned to
the value properties

{done: false, value: "Sam"} 


Generator functions return objects that provide
the same next methods expected by for...of,
the spread operator, and the destructuring
assignment. 

git config --global color.ui true




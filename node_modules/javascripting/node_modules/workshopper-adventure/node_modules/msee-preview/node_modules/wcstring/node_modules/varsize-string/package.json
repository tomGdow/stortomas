{
  "name": "varsize-string",
  "version": "2.2.0",
  "description": "A package for working with strings where the different characters have different sizes.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "istanbul cover tape test/**/*.js; standard"
  },
  "keywords": [
    "unicode",
    "visualwidth",
    "terminal",
    "wide character",
    "wc",
    "wide character string",
    "wcs",
    "terminal",
    "width",
    "wcwidth",
    "wcswidth"
  ],
  "author": {
    "name": "Martin Heidegger",
    "email": "martin.heidegger@gmail.com"
  },
  "license": "ISC",
  "devDependencies": {
    "standard": "^5.3.1",
    "tape": "^4.2.2",
    "istanbul": "^0.4.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/martinheidegger/varsize-string.git"
  },
  "bugs": {
    "url": "https://github.com/martinheidegger/varsize-string/issues"
  },
  "homepage": "https://github.com/martinheidegger/varsize-string#readme",
  "readme": "[![ISC License](https://img.shields.io/badge/license-ISC-blue.svg?style=flat)](LICENSE.md)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)\n[![npm version](https://badge.fury.io/js/varsize-string.svg)](https://badge.fury.io/js/varsize-string)\n[![Build Status](https://travis-ci.org/martinheidegger/varsize-string.svg?branch=master)](https://travis-ci.org/martinheidegger/varsize-string)\n\n# varsize-string\nVarsize-string is a JavaScript CommonJS (node.js) package for working\nwith strings where the different characters have different sizes.\n\n## Installation & Usage\nWith [npm](https://docs.npmjs.com/getting-started/installing-node) you can install and use the `varsize-string` like this:\n\n```\n$ npm install varsize-string --save\n```\n\nWith the package being successfully installed you can create an instance like this:\n\n```JavaScript\nfunction charWidth(charCode, formerCharCode, inString, pos) {\n    /* in this example a-z (lower-case) is 0.8 the width of other characters */\n    return (charCode >= 97 && charCode <= 122 ) ? 0.8 : 1\n}\nvar VarSizeString = require('varsize-string')\nvar str = new VarSizeString('ABCdef', charWidth)\nvar str2 = VarSizeString('abcDEF', charWidth) // You don't need to use `new`\n```\n\n## Application\nThe most important application of `varsize-string` is in combination with \n[`wcsize`](https://github.com/martinheidegger/wcsize) that identifies the size of strings rendered in a common terminal,\nsee [`wcstring`](https://github.com/martinheidegger/wcstring) for a shorthand combination of both.\n\nIt can also be used in a (visual) web context to correctly `wrap` or `truncate` strings.\n\n## Operations\nOn the instance you can apply a set of operations. Note that the following explanation uses `size` as an accumulated amount of width and `width` as a single-line `size`.\n\n### `.width()`\nGet the `size` of the widest line in the string. \n\n### `.size()`\nGet the `size` of the complete string.\n\n### `.sizeBeforeFirst(search, [<int> startOffset])`\nAnalogous to [`String.indexOf`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf). Looks for the first occurance of `search`. Optionally takes `startOffset` which is the `size` of characters that have to happen before the search takes place (default=0).\n\n### `.sizeBeforeLast(search, [<int> endOffset])`\nAnalogous to [`String.lastIndexOf`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf). Looks for the last occurance of `search`.\nOptionally takes `endOffset` which is the size offset from the end of the string from which to search for `search`.\n\n### `.substring(<int> startSize, [<int> endSize])`\nAnalogous to [`String.substring`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring). This method will return the **fully visible** characters between `startSize` and `endSize`. If `endSize` is not given it will assume a substring from `startSize` until the end of the string.\n_However:_ **Unlike** `String.substring`, this method returns an object with the properties `size` and `string` in order to know the size of the substring.\n\nExample:\n```JavaScript\nvar vsstring = require('varsize-string')\nvsstring('abcdef', charWidth).substring(0, 3) // {string: 'abc', size: 2.4}\n```\n\n### `.substr(<int> startSize, [<int> size])`\nEqual to `.substring(startSize, startSize + size)`.\n\n\n### `.truncate(<int> size, <varsize-string || String> suffix)`\nTruncates the string after a size. Will append the given `suffix` to the string if it does exceed the size.\n\n### `.pop()`\nRemoves the last character from the string and returns the new `.size()`.\n\n### `.wrap(<int> width, [padding])`\nNormalizes the string in order for all lines to fit within `width`.\n\nExample:\n```JavaScript\nvar vsstring = require('varsize-string')\nvsstring('abcdef', charWidth).wrap(3) // 'abc\\ndef'\nvsstring('ab cd ef', charWidth).wrap(5) // 'ab cd\\nef'\nvsstring('ab cd ef', charWidth).wrap(3) // 'ab\\ncd\\nef'\n```\n\n#### Padding\nThe padding option takes a padding specification and applies it to the\nwrapping process.\n\nExample:\n\n```JavaScript\nvar padding = {\n    first: {left: ' - ', right: ' '},\n    regular: {left: '   ', right: ' '}\n}\nvsstring('abcdefghijklmnop', charWidth).wrap(10, padding)\n//  - abcdef\n//    ghijkl\n//    mnop\n```\n\nThere are a few shorthands to specifying the padding:\n\n```JavaScript\npadding = '  '\n```\n\n... is equals to ...\n\n```JavaScript\n{\n    first: '  ',\n    regular: '  '\n}\n```\n\n... is equals to ...\n\n```JavaScript\n{\n    first: {left: '  ': right: undefined},\n    regular: {left: '  ': right: undefined}\n}\n```\n\nAlso you can preset left/right for both first and regular:\n\n```JavScript\n{\n    right: 'x',\n    first: {left: ' - '},\n    regular: {left: '   '}\n}\n```\n\n... is equal to ... \n\n```JavaScript\n{\n    first: {left: ' - ', right: 'x'},\n    regular: {left: '   ', right: 'x'}\n}\n```\n\nNote that the left/right presets override the first/regular specification:\n\n```JavaScript\n{\n    left: 'x',\n    first: '-',\n    regular: ' '\n}\n```\n\n... is equal to ...\n\n```JavaScript\n{\n    first: {left: 'x', right: undefined},\n    regular: {left: 'x', right: undefined}\n}\n```\n\nAlso it supports a fallback to regular if first is missing:\n\n```JavaScript\n{\n    regular: {left: 'x', right: undefined}\n}\n```\n\n... is equal to ...\n\n```JavaScript\n{\n    first: {left: 'x', right: undefined},\n    regular: {left: 'x', right: undefined}\n}\n```\n\n### `vsstring.padding(characterLookup, [process], [width], padding)`\nTurns a flexible padding definition into a clear padding definition. You can pass in an optional `process` variable to process the strings before they are being turned into varsizes-strings. You can also pass-in a `width` to make sure that the padding will not exceed the width of, say, a wrapped string.\n",
  "readmeFilename": "Readme.md",
  "_id": "varsize-string@2.2.0",
  "dist": {
    "shasum": "278081dcb90a08dadcd76e39e2518bfcfe57d362"
  },
  "_from": "varsize-string@^2.2.0",
  "_resolved": "https://registry.npmjs.org/varsize-string/-/varsize-string-2.2.0.tgz"
}

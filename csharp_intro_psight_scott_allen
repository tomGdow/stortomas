
# Console apps can be run from command line

# Editing C#
# In debugger, F10 steps over code.
# In C#, types are very important. C# is a strongly typed language. 
# Write a class to create a new type.
# Console.is a type, and call WriteLine (but not Print) 
# FCL does NOT provide Classes and Types specific to the problem we are trying to solve.
# Primitive types such as int (Integer), long (Long Integer), DateTime (Date and Time Value)

                                 #Classes in C#
# We need an electronics grade book to read the scores of an individual student 
# and then compute some simple statistics from the scores.

# The grades are entered as floating-point numbers from 0 to 100, and the 
# statistics should show the highest grade, the lowest grade, and the avarage grade. 
# Create a class to make an abstraction of an NOUN. Grade book is a noun. 

# Most c-sharp developers will put each class in its own file. 

# Class Members fall broadly into two classes.
#1 State
#2 Behaviour
# State is the data you need to work with. 
# State for gradebook is the grades that are being entered for student.
# Behaviour is typically methods that do work. 
# Two c-sharp keywords: public and void. Will be discussed later. 
# Say addAGrade, or compute statistics. 
# Classes define a new type. 
# Classes are one way to define a type.
# Can use a class to instantiate one or more objects
# It is objects that I need to work with in my program. 
# It is objects that are allocated into memory of computer
# and it is objects that hold the data that I need. 
# Think of a class definition as a blueprint for creating objects of that type. 
# Think of it as a cookie-cutter. The CLR will use my gradebook cookie-cutter to
# create new cookies with the shape of a gradebook, and the dough that it is using
# is the memory of the computer.  
# Ctrl-F5 to run program without debugger. 
# Constructors
# Special methods used to initialize objects
GradeBook  book = new GradeBook();
#When I use the new keyword followed by the name of
# a class with parentheses, I am instantiating an 
# instance of a class. It is creating an object.
# Creating an object will invoke a special method we call
# a constructor. A consructor  helps to construct an object. 
# Every class will have a defaut contstructor that exists 
# implicitly unless I do something special. 
# This is why I can create an instance of GradeBook
# that works, that is that gives me an object, even
# though I do not have a constructor explicitly defined 
# inside GradeBook.
# If I do define a constructor, it is very much like
# defining a method. 
public GradeBook () 

{
        // ... initialization code
}

# I'll use the public keyword again
# void not necessary
# after public keyword, define a method where the method name
# is the same as the class.  As with method will have 
# parentheses, which will take argumentts if you want. 
# Also has curly braces to denote start and end of the method.
# There are many situations where you will want to write your
# own constructor, or multiple constructors, for a class. 
# Allows fine control ...
ctor # // Press Tab twice
# recognised as code snippet in Visual Studio 

# Classes versus Variables
# A class is a blueprint for creating objects
# Objects created from Classes with 'new' keyword
# a class can also be used to type a variable
GradeBook book;
# a variable can refer to any object of the same type
# You can think of a variable as a storage location
# that points to a specific object. 

Gradebook book = new GradeBook();

# Instantiating an instance of the GradeBook class
# referring to the new object that is being created
# through the book variable of type Gradebook 
# More than one variable may point to a single object
# When an object is not referred to by variable anymore (say
# overwritten) exists in memory but cannot refer to it anymore.
# Garbage collector will take care of that. 
#Common language runtime is smart enough to periodically scan
#throught memory, figure out which objects are garbage because
#they are not referred to by any variables in the program,
#and can clean those object up, thus freeing up memory. 
#Reference Types
# When we create a class in c#, we are creating a type,
# specifically we are creating a reference type. 
# Reference types are one category of types in c-sharp.
# Classes are reference types. 
# When we have a variable that is typed as a class like GradeBook,
# a reference type,  we have a storage location in memory
# to remember the Gradebook, but it is incredibly important to 
# understand that the storage location dedicated to a variable,
# like a variable called 'book1', DOES MOT hold the GradeBook 
# itself.. that is NOT where the GradeBook is stored. The
# GradeBook is stored somewhere else im memory, and the
# storage location of the variable holds a pointer to that
# object in memory.  The variable literally contains
# a memory address. It is like when someone gives you their7
# business card. You don't hold the other person, you hold
# a pointer or address to the business. 
# part of indirection in software. 
# One implication is that I can have multiple
# variables (all of type GradeBook) all pointing to 
# the same object. 
# OOP
# Encapsulation
# VisualStudio. Ctrl-period to create a methods stub. 
# void keyword: no return value
# Access Modifiers
# Encapsulation is the ability to hide or group related concepts
# access modifiers are keywords like 'public' and 'private' 
# that describe who is allowed to access certain fields and methods. 
# Important when want to hide something from other programmers,
# and make your classes easier to work with. 
# For example, GradeBook keeps around a list of grades being entered.
# The list of grades is private, meaning there is no access to the
# list of grades from outside the GradeBook 
# ONLY THE CODE INSIDE THE GRADEBOOK can inspect and
# modify the list, so grades are completly encapsulated inside
# the GradeBook
# Gradebook also has methods such as AddGrade and ComputeStatistics
# that use the 'public' keyword. 
# These methods are publicly available, meaning anyone 
# who has a variable pointing to a GradeBook object can access
# these methods and invoke them. The methods still provide some
# encapsulation in that we do not need to see what code is inside
# the methods, but the methods themselves are public and open to
# everyone. 
# 'public' and 'private' are just two access modifiers. 
# A constructor does not have a return type (void is a return type) 
# Statics
# Use static members of a class without creating an instance
# Members of a class may be marked as static. 
public static float MinimumGrade = 0;
public static float MaximumGrade = 100;
# Other examples
Console.WriteLine("Hello!");
# Generally speaking, to do any useful work with a Class
# you need to use the 'new' keyword to call a constructor
# and create an instance of that Class, but there are classes
# out there with static members that can do work without creating
# an instance of that Class. Instead you reference a static
# field or static method using the Class name followed
# by a dot followed by name of the static field or method
# you want to access. For example:  
Console.WriteLine(GradeBook.MaximumGrade);
# This is also how Console.WriteLine works. Console is a
# Class, but I do not need to create an instance of Console ...
# It has static methods like WriteLine that I can invoke, 
# as above. 
# Be careful  with statics! 

                             # Types and Assemblies 

# Every c# type falls into one of two categories
#1 Reference type
#2 Value type
# Will also see how types are packaged into files called assemblies. 

# Reference Types
# Reference types in c# are types creaged from Class definitions
# like the GradeBook created in the last module.  Anytime I 
# create a new Class, I am creating a new reference type. 
# Variables hold a reference to an object
# Multiple variables can point to the same object 

#public members we expose from a Class, start with a capital letter.

# In reference types, variables POINT to objects that are allocated in memory. 

#2 Value Types. 
# Variables hold the value. 
# No Pointers.  No references. 
# Does not hold a memory address
# For example, integers and floats are value types in .NET 
# If I have a variable y of type int or int32 (synonyms) and I assign
# this variable a value of 4, then the value 4 is literally stored
# inside the memory location of variable y.  It is no longer a pointer to an object in memory. 
# The value is wholly inside that variable. 
# If y = 4 and I say x = y, we
# take a copy y and put it into x.  Now both x and y hold the value 4.
# Value types exist because they are generally faster to allocate than reference types.
# Creating an Object is more expensive than creating a value. 
# Most primitive types in .NET are value types. 
# Value types are immutable. 
# How do we create a value type? That is where the keyword 'struct' comes in ...
# Method Parameters. 
# In C#,  parameters pass 'by value' by default 
# This means that when you call a method that takes a parameter, by default
# the value that you have in your variable that is passed to the method is
# GOING TO BE COPIED into the variable that is a parameter to a method, unless
# you add some additional keywords.
# However, keywords almost never used. 
# This means for reference types, you are passing a copy of a reference, or
# a copy of a pointer to an object. 
# But when you pass a variable of value type to a method, you are passing a copy
# of that value.
# There are two keywords that may be used to change 'pass by value' behaviour.
# These should be used very sparingly. 
static void GiveBookAName(ref GradeBook book) 
# Now pass BY REFERENCE
GiveBookAName(ref g2); 
#The other keyword is 'out'
# Pretty much the same as ref, with one little difference
# ref assumes that the variable being passed in has
# already been initialized, and it does not need to
# assign anything to it. 
# out can take an uninitialized variable, but MUST make
# an assignment. 
# There is usually a better way than 'ref' and 'out'.

# Struts and Enums
# Creating Value types.
# struct definitions create value types. 
public strut DateTime 
{
  // ...
}
# A struct definition looks just like a Class definition ...
# It has a name, and opening/closing curly-braces.
# Everything inside curly braces a member of the structure. 
# How do I decide whether to write a class or a struct?
# General rule-of-thumb is write a class by default. 
# Structs are meant for special cases where you 
# want to write an abstraction that represents a single value.
# A DateTime, for example, represets a single value 
# Represents something we can reason about as a single value
# Structs do best when they contain a small amount of data. 
# They will be copied frequently, for example. 

# Another way to create a value-type in c# is to 
# create an enum. 
# An enum creates a type that can only contain specific 
# numerical values. 
# An enum, short for enumeration, is a good way
# to create named constants in your software
# So istead of using 1 or 4 or whatever in code can use
# PayrollType.Hourly (instead of '1'). 
public enum PayrollType 
{
    Contractor = 1,
    Salaried,
    Executive,
    Hourly
}

# For example
if (employee.Role == PayroleType.Hourly) 
{
    // ...
}

#F12 Go to Definition.  Useful to tell if dealing with a ref
# type or  a value type.  
# Classes are always ref types
# structs are always value types
StringComparison 
# is a built-in enumeration. 

# Immutability
# One special behaviour of value types is that
# value types are typically immutable. 
# Primitive types provided by Microsoft are all immutable
# This means that once create value type cannot change. 
# You CAN of course chane the value you are storing in a
# variable (that's why they are called 'variables') but 
# the actual value can never change. 
# Cannot change value of 4
# Cannot change the value of August 9th, 2002.
# Two common errors new C# developers frequently run into.
# DateTime 
# StringType

DateTime date = newDateTime (2002, 9, 11);
date.AddDays(1)

#LOOKS like can add 1 day to date ...
# but AddDays will never change the underlying value 
# that is inside my variable. 
# Instead what it will do is return a new DateTime value!

string name = " Scott ";
name .Trim();
# What is interesting about a string is that it is a REFERENCE
# TYPE. Don't let anyone tell you any different. 
# When you are working with strings you have a reference
# that points to a sequence of characters. That makes it 
# easy to pass strings around to different methods. Because
# we pass a reference instead of passing the entire string. 
# So string is a reference type, but it behaves like a value
# type in many, many ways. One way is that is string is 
# immutable. Once you have constructed a string, you cannot
# change that string value. 
# Let's consider 'Trim'
# What 'Trim' will do is remove the leading and trailing
# whitespace.
# It does not to that by modifiying the string I am pointing at:
# instead it creates a new string with the characters removed. 

# Arrays
# Manage a collection of variables. 
# The array is ALWAYS a reference type. 
# Arrays, unlike list, have a fixed size. 
# Must specify size of array, and that size cannot be changed. 
# Always zero indexed. 
# We are using a list in GradeBook, rather than an array, because we do not 
# know how many grades are going to be stored. 
# A list will grow automatically, and grab the space necessary to hold new items. 
# This is POSSIBLE with array, but much more difficult. 
# One thing that an array and a list have in commmon is that they are both 
# zero-indexed.
# To declare an array
const int numberOfStudents =4;
int[] scores = new int[numberOfStudents]
int totalScore = 0;
foreeach(int score in scores) 
{
    totalScore += score;
}

double averageScore = (double)totalScore / scores.lengh;
# Can only store integer values
# Can only contain four values
# Assemblies
# Assemblies are .exe or .dll files
# Contain metadata about all files inside 
# Cannot leave this module without talking about the relationship between
# types and assemblies, because all of the types we create, both ref types
# and value types, all have to be packaged into an assembly in order for the 
# code to execute or be used for other programs. 
# Assemblies are just files with the .exe or .dll extension. They are
# produced in Visual Studio program from the C# compiler.  
# If you want to share, say the GradeBook with other people can
# 1 Give them the source code and they can build their own assembly
# 2 Give them a copy of the assembly itself. 

# In fact Microsoft does option 2.  All of built-in types we have been 
# looking at: integers, DateTime, strings,  lists, arrays ... 
# all of the code for these types live in assemblies that Microsoft has
# authored. 
# Because they are used by every .NET program on a machine, 
# Microsoft puts many of these .NET core assemblies into a location on 
# your machine known as the 
# Global Assembly Cache,
# which is a central location to store assemblies for a machine. 
# By default GAC is underneath Windows directory in a folder called assembly
# C:/Windows/assembly 
# Must load assembly into memory before using types inside. 
# Easy approach - Reference the assembly in Visual Studio 
# See References node within Solution Explorer
# Contains a list of all the assemblies that the project is using. 
# Can remove assemblies if unused.  
# But cannot remove mscorlib 
# If want to add a reference ...
# Right-click on 'References'
# => Add Reference
# -> Dialog Box ...
# -> Search for Speech 
# -> Add

# Test Yourself
# Unit tests ...
# A Visual Studio Solution can have multiple projects inside of it...

# Methods, Events and Properties in C# 

#Methods
# Methods define behaviour. 
# They are a place where we can write code
# Code inside of a named abstraction
# We can invoke a method to execute the code
# Every method has an access modifier (public ...)
# Default is 'private', which means method only
# available to code inside same class
# 'internal' means available to all code within same
# project
# Or use 'public' keyword to make method available 
# everywhere
# Each method also has a return type. 
# In the example below the return type is 'void',
# meaning that it does not return a value to
# the caller. 
# Next we have the method name, 'WriteAsBytes'
# Then list of parameters
public void WriteAsBytes(int value)
{
    byte[] bytes = BitConverter.GetBytes(value);

    foreach(byte b  in bytes)
    {
        Console.Write("0x{0:x2} ", b);
    }
}

# Some new things about methods
#1 params => allows a method to take a variable number of parameters.
#2 Method signature
# Uniquely identifies a method. 
# Consists of name of method ('WriteAsBytes') as well as
# the NUMBER and TYPE of parameters.
# The C# compiler can distinguish between a method named 
# 'WriteAsBytes' that takes a single integer as parameter and
# another method with the same name ('WriteAsBytes') that
# takes a string as parameter. Those are two different methods to
# the compiler. 
# Can have both of these methods in my class.
# That is what is called method overloading in c#.
# You can write as many methods called 'WriteAsBytes inside
# a single class, as long as the parameter lists are different,
# as parameter lists are part of the signature. 
# note that the return type of a method is NOT 
# part of signature
#
#params
#When you have 'params' in front of the last parameter to  a method,
# that means the caller can pass as many parameters as they want. 
# params variables are always arrays. 

# Fields and Properties
# Fields are variables of a class. 
# So they define the state or data that you want to hold.
# It is common to make fields private 

public Class Animal
{
    private readonly string _name;

    public  Animal(string name)
    {
        _name = name;
    }
}

# '_' (underscore) is not required for private fields, this
# is just a nameing convention that some developers used
# for private fields. 
# 'readonly' keyword.  This keyword is optional, but it is something that you
# can use if you only want that field set inside the contstructor, or 
# when you declare the field.  

# How can I let code from outside get to the value of my field?
# Do I have to write a method to return the value of any field?
# The answer is 'no', that is where properties come in. 

# Properties
# A property is similar to a field because it controls state,
# and the data that are associated with an object, but
# unlike  a field a property has a special syntax that
# we can use to control what happens when someone tries to read data,
# or write data. The 'get' and 'set' accessors, respectively.
# So 'get' for reading data, and 'set' for writing data.
# And an accessor like 'get' or 'set' can have code to
# do computations or validate something.

private sting _name;

public string Name
{
    get {return _name: }
    
    set 
    {
        if(!String.IsNullOrEmpty(value))
        {
            _name = value;
        }
    }
}

#In code snippet
#1 Have a private field called 'name'
# It's private so can only access that field directly from code
# inside the same class. 
#2 Also have PROPERTY called 'Name', and that is captitalized. 
# Bacause the naming convention that 99% of C# programmers follow
# is to capitalize property names (as well as method names). 
# But I know this is a property because it has 'get' and 'set' accessors.
# Can write as much code as I want, but ultimately must return a
# string because I am inside a property of type string. 
# And the way someone will access this property from code outside this
# class will be to say 'object.name' ...
# No parentheses are necessary. We are not invoking a method. We are
# just reading a property. 
# '.name' will invoke the get accessor, which in this case is just
# going to return _name. 
# 3 There is also the 'set' accessor.
# Inside of a set you will have a variable named 'value'
# This is not something you need to declare, it's a variable
# that is magically available to you, and it is the value that
# someone else wants to write into your property. 
# So when someone else says 'object.name=', this will call your
# 'set' accessor. 
# 4 As aside, lets look at syntax for  auto-implemented  property. 
# This is a property that has the keywords 'set' and 'get' inside
# with semi-colons at the end. 

public string Name 
{
    get;
    set;
}

# So there is no executable code for 'get' or 'set'. 
# Called auto-implemented property because c# compiler will
# automatically create a field to store the value in. 
# I do not have access to the field from c# code. 

# A property by itself does not specify a storage location.
# It is really just a collection of code.
# So if I want to store that name value somewhere and
# have it saved, behind my property I usually need a field
# that will define a storage location.
# That is what auto-implement does.  Automatically creates
# backing field. 

# So what is the diffence between a property and a field?
# Syntatically can look the same.
# A couple of good answers.
#1 A prop allows me to write code to validate incoming values.
# or to do computations.
# Cannot do these with field. 
#2 Another answer.  Pieces of .NET framework, pieces that
# do serialization.  So they take an object and turn it 
# into xml or json and transmit it over the network. 
# Also pieces of the framework that do databinding, which is 
# the process of automatically moveing  data from an object
# into a control on the screen, many of those framework pieces
# only work against properties, not fields. 
# For those two reasons properties are typically the way we
# want to expose data. 

# Events
# Another type of member you have in a class is an event.
# Events allow a class to send notifications to other
# classes or objects.
#1 Publisher raises the event
#2 One or more subscribers process the event.
#For example

# Button => Click   -> subscriber
#                   -> subscriber
#                   -> subscriber
#                   -> subscriber

# A button on a screen is a component that we need to keep
# track of and we want to know when a user clicks on 
# this component. We don't know when a user will click on
# a button - it could happen at anytime, but we do need to 
# be notified when it happens. 
# Events allow a component, like a button class, to 
# annouce to anyone who is listening, when something
# interesting happens. 
# We would call the click a click event and say that the 
# button publishes this event. The code that is interested in
# this event is code that subscribes to the event. 
# You can have mutiple subscribers listening to a single event.
# Three different bits of code may all execute off the same
# event, and the beauty of events is that the button 
# event does not need to keep track of who is subscribing AND
# the subscribers do not need to know about each other. 
# It is all done through the magic of delegate in c#.

#Delegates.
# One of the harder concepts in C# to understand.
# Delegates will lead us into events (because
# events are based on delegates).
# Here is the story of a delegate (by Scott Allen)
# Imagine I want to declare a variable that references
# a method. So I am not declaring a  method to hold an integer
# or point to a string or point to an object, I want
# to declare a variable and point the variable to a method. 
# That means I have a variable that encapsulates executable
# code and I can invoke the variable just like I would invoke
# a method. I can use parentheses on the variable and optionally
# pass in some arguments. 
# Imagine I have a class called Logger ..

public class Logger
{
    
    public void WriteMessage(String message) 
    {
        Console.WriteLine(message)
    }

}

# I can instantiate a logger, and once I have a variable 
# referencing a Logger I can say 
variable.WriteMessage
#but can also write a bit of code that instantiates a logger,
#and then instantiates a delegate that references the WriteMessage
# method itself. 
# aside
# ----------
# in the code below the following is the delegate
Writer writer = new Writer(logger.WriteMessage);
#-----------

Logger logger = new Logger();
Writer writer = new Writer(logger.WriteMessage);
writer("Success!!");

# So 'Writer' is a delegate (which will need to be defined). 
# But I am creating a  delegate,
# and I am passing in logger.WriteMessage to a constructor
# Notice I am not invoking logger.WriteMessage. There are
# no parentheses after WriteMessage.  I am literally
# passing the WriteMessage method to this writer delegate, 
# and saving this delegate in a variable called writer. 
# and now I can invoke logger.WriteMessage just by invoking
# my variable named writer

writer("Success!!");

# In order for this to work, I do need a delegate type. 

########
# So a delegate is a type that references methods 
########

# Just like a Class is a type and a struct is a type. 

# The delegate keyword creates a new type in the .NET framework
# a type that is dedicated to referencing methods, and
# because it is working with methods, the definition looks
# much different from a class definition. The type defn 
# looks almost like a method definition. 

public delegate void Writer(string message); 

# I am creating a type that describes the types of methods I
# want to call. 
# It HAS to be a method that returns void and it takes
# one parameter, a string parameter. The name of 
# the method does not matter. It just has to be any
# method that returns void and returns one string parameter.

# From a C, C++ background, could think of delegate as
# a way of creating type-safe function pointer, because I 
# do have a variable that references a method, but it is 
# going to do type-checking to make sure the right numbers
# and types of parameters are there, and that the return
# type is also compatible. 

# From a functional programming language background, like
# javascript (!sic) the idea of variables pointing to 
# functions is not new. It is just the C# syntax and
# type checking that will need to be got used to. 

# In C#, events ARE delegates 
# events prevent subscribers from conflicting with each other. 

# 99.99% of events in c# follow a convention ...
# Not (yet) being following in GradeBook. 
# With an event would never pass arbitrary parameters like
# 'string' and 'string'. 
# All events in .NET take two parameters.  
#1 The first is always the sender
#2 The second parameter is an object that encapsulates
# all other information that a subscriber might need to 
# know about this event. 

#Tip Visual Studio
# If type 'prop' and hit tab key twice, wil expand out ..

# Summary of Module
# Members are used to craft an abstraction.
    # Fields and Properties for state
    # Methods for behaviour
    # Events for notification

# The whole goal of seeing fields, properties, methods, 
# constructors and events all together is to know what 
# tools are available when you want to build an abstraction in c#,
# where an abstraction is a component that encapsulates
# and models some piece of our software or some object in
# the real world. 

# New Module 
                                 # Flow Control 

#1 Branching

if (age <= 2) 
    ServeMilk();
else if (age < 21)
    ServeSoda();
else
{
    ServerDrink();
}

# Notice that I DO NOT NEED to use curly braces to surround
# ServerMilk();
# (but is considered a good coding style to do so by many people,
# including Scott Allen). And ARE required if more than one
# method is invoked by 'if'. 

# The code inside an else statement is only executed if the
# previous if statement returns false. 
# Curly braces around (else) ServerDrink() also NOT required. 

# It is also possible to nest if statements. 

if (age <=2 )
{
    if (name == "Scott")
    {
        //.. 
    }
}

# could also use if with the 'and' operator (and avoid nested ifs). 
if(age <=2 && name == "Scott") # I presume

# Closely related to the if statement is the CONDITIONAL OPERATOR.

string pass = age > 20 ? "pass" : "nopass";

#operator consists of question mark and colon. 
# Also sometimes referred to as the TERNARY OPERATOR. 
# comes in 3 pieces
# First piece is an expression that needs to return true or false (age >20)
# If expression returns false, return value on LHS of colon
# if expression returns true, return value on RHS of colon.
# age is 19, the value that is assigned to the variable pass is the
# string value "pass".
# Be wary of over-use of conditional operators. 

#2 Switch Statements

# Restricted to integers, characters, strings, and enums
   # Case labels are constants
   # default label is optional

switch (name) {
    case "Scott":
        ServerSoda();
        break;
    case "Poona":
        ServeMilk();
        ServeDrink();
        break;
    default :
        ServeMilk();
        break;

#switch statement matches the value inside 'switch' with
#the values given in each case label. 
# varibles in case must be compile-time constants. 
# CANNOT fall through (as in C or C++). 
# C# compiler will force you to have a 'break'
# default is optional. 
# The type of values you can switch on is restricted to
# a certain subset of types. 
# Can switch on var that are integers, characters,
# strings, or enumeration. 

# character type in c#. 
# used in c# using 'char' keyword.
# A char variable can hold only a single character (
# different from string). 
# To represt a char in c#, must use single quotes
# instead of single quotes. 

#3 Iterating (Looping) 
# Iterating is a fancy term for looping over code, 
# and executing that code repeatedly. 
# There are four statements for iterating in the c# language
#1 One looping statement (that we have already seen) is
# the foreach statement. 
int[] ages = {2, 21, 40, 72, 100};

foreach(int value in ages) 
{
    Console.WriteLine(value);
}

#2 Can also write loops with for statement.
# You can think of 'for' as being explicity about the
# starting and ending conditions for looping. 

for(int i = 0; i < age; i++) 
{
    Console.WriteLine(i);
}

# 'for' statement contains 3 pieces of information
    #1 the initializer (int i =0)
    #2 the condition
    #3 the iterator.

# Same as C, C++, JavaScript ...

# For statement always begins by executing any statements in the
# initializer. These statements are only executed once. 
# Bofore any statements inside of the for loop are executed
# the condition is evaluated.  (The condition comes after the
# first semi-colan in 'for' loopl.
# The condition is a boolean that returns true or false
# a for loop will execute zero or more times. 
# if the condition returns false on the first pass, no code will
# be executed. 
# After each execution of code inside, the iterator is incremented.
# Usually increments (or decrements) an index variable. 
# The 'i' is called the index variable.  The iterator is used to 
# increment or decrement the index variable, typically called 'i'.

# do while statement 
do 
{
  age++;
  Console.WriteLine(age);

} while (age < 100); 

# The 'do' statement always executes at least once. 
# You are guarenteed to execute the code inside at least once.

# Above a little diffrent to 'while' statement
while (age > 0) 
{
    age -= 1;
    Console.WriteLine(age);
}

#Console.Out is the output stream of the console. 
# It is something I can write into. An abstraction.  
# And what that abstraction will do behind the scenes is that
# evertything I write into it, it will make that text appear on screen.
# And the type of Console.Out is a class called a textwriter. 

# Jumping

# break
# continue
# goto
# return
# throw

# 'break' already seen inside the case label of a switch statement.
#  but can also use 'break' inside a for loop, a while loop ...

foreach(int age in ages) {
    if(age ==2) {
      continue;
    }
    if(age == 21) {
      break;
    }
}

# Can use 'break' to jump out of a loop and stop looping. 
# 'continue' same as 'break' except that instead of breaking out of
# the foreach statement, we are going to skip executing any code
# after the continue statement and go through the next iteration
# of the loop.

# And then there is the goto statement in c#
foreach(int age in ages) {
    if(age == 2) {
        goto skip;
    }

    //...
    skip:
        Console.WriteLine("Hello!");
} 

# Can jump to anothe statement that is marked by a label. 
# In ten years fo c# and c++ programming, Scott Allen never used goto!
# return 
# CAN use a return statement with a void method. 
# You are just not allowed to pass a value back to the caller

void CheckAges() 
{
    foreach (int age in ComputerAges())
        {
            if (age ==21) return;
        }
}

# in the above example, using return to  break out of foreach loop
# and to break out of the method itself. 

#throw
# So ... time to talk about exceptions 
# The 'throw' keyword in c# is used to raise an exception. 
# An exception is a signal that an error exists. 
# Exceptions should only be used in exceptional circumstances. 
# Do not use to change the normal program flow. 
# That is what if statements are for. 
# Use exceptions when software finds itself in position where it
# cannot move forward. If you have a bad input value, for example 
# or the program is out of memory, or network is not available
# for communication. 
# When you throw an exception, you are throwing an object. 
# This is why we say exception handling is type safe. 
# Bacause every exception in c# is going to be of a known type
# We also say that working with exceptions is structured, 
# because you can set up blocks of code to handle exceptions,
# meaning you can structure your program to anticipate certain
# exceptions and try to recover from error. 
# exceptions use the 'throw' keyword.
# An interesting choice of word. 
# Can picture your software throwing some error object which will
# travel back through the program until it is stoppes by
# what is called an exception handler ( a piece of
# code that tries to recover from an exception) or,
# if there are no exception handlers, we have what is called
# an unhandled exception. 
# Unhandled exceptions will typically terminate a program. 
# This sounds terrible, but in reality it is probably better
# to shut down a program that has an unhandled exception than it is
# to let the program continue. Because the program might be in bad
# state after an error occurs. 

if (age == 21) 
{

    throw new ArgumentException("21 is not a legal value"); :wq
    ;

}
# Exceptions provide save and trusted error handling in .net
#

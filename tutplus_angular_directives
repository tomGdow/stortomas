# Simple HTTP Server
python -m SimpleHTTPServer


# To use replace: true, directive must have only one root element.
# Four ways to add the directive 'heading' to html

       <heading></heading>
        <p heading></p>
        <div class="heading"></div>
        <!-- directive: heading -->

# When using comment method, also must have 'replace:true' in directive object.

# Scope
# 1. Default is parent scope. 
# 2. scope: true  // Uses child scope that prototypically inherits from parent. 
# The directive will be given its own scope object.  However if the object does not
# have that property or method, it will look (prototypically) to parent. 
# When give directive its own title property, it no longer inherits from parent scope
# In effect, have introduced shadowing. 
# 3. Isolated Scope.
# Perhaps the most useful. 

scope { 
title: '@title'
}

scope: {
title: '@'
}

'@' a great way of getting a value into a directive, and not worry about
using it after that. 

However, if you want directive to change something outside of itself, need to use 2-way binding.

  scope: {
subtitle: '='
}

# subtitle attribute of our heading directive should be the name of a model that we
# want to be able to both get and set from within the directive
# 'should be model' is key. For example, may have in controller
# $scope.subtitle = "Subtitle from main";

# The is one more type of isolate scope.  We can create an expression that may
# called as a function.

# A directive may have its own controller. 
return {

        //...

        controller: function ($scope, $element, $attrs) {
            this.name = "Chart Directive";
        
        }
# controller takes the same 3 props that link function does.
# But as it is controller, it is the convention to preceed them with the '$' sign.
# One benefit of using a controller is that we can assign values to 'this'.
# The 'this' object is the controller object, which may  be accessed outside 
# the directive.  
# We can access this property from another directive using 'require'. 
# 'require' 
# the 'require' attribute allows us to require the controller of another directive. 
require 'chart'
# implies that both directives are SIBLINGS.
require '^chart'
# implies that we expect the chart directive to be a parent of the calling directive. 
# Once we have required a controller, we can access it from the link
# function as a fourth parameter! 


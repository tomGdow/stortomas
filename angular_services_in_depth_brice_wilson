# Angular Services in Depth.
# Brice Wilson

# There are 5 Different ways to create a service in Angular.

# Services and Providers

# There are 5 functions that may be used to create a service in Angular
# All these fns may be called on the built-in provide service
# All are also exposed on the module object as a convenience

#1 The most fundamental service provider function is 
provider()
# Allows you to explicitly create a configurable provider
# object 
# Three of the remaining 4 functions all internally call
# the provider. Just shortcuts if you don't need all the
funtionality provided by provider.
#2 The first of these is factory(). The first of the
#wrapper funtions. Will probably become your primary 
#service creation function. 
#3 service().  Just a simple wrapper around the factory function
# When you call the service function it will internally call
# the factory function, which will then call the provider function.
#4 The value function is similarly a wrapper around the factory function.
#5 The constant function. This one looks similar but is actually
#fundamentally different. It does NOT call the factory function
# or the provider function. 

# Services are designed to be injected into the other components
# of your application. Their creation is very much part of Angular's
# dependency injection system. 
## Injectable services are known as providers. 
# So before a service is created there must be a provider that
# knows how to create this. 
# The $provide service is used to do that. It is one of the services
# that ships with Angular. It has several components to register
# components with the Angular injector. 
# Once registered, the injector knows how to find the correct instance
# and pass it as a parameter to other components needing them. 

#The basic process of creating a service is that a provide SERVICE
# creates a provider which contains a function that is used to
# create a service. 

# The first function on the $provide service we'll look at is the
# provider() function. 
# This is the most fundamental way to create a service.

$provide.provider('books', function () {
		this.$get = function () {
		var appName = "Book Logger";
		return {
			appName: appName
	};
}

# All other methods, except constant, are wrappers around the provider 
# service

# Using $provide.provider()
# call the 'provider' function on the $provide service
# in above example, the name of service is 'books'
# and the name of the provider will be booksProvider

# The NUMBER ONE RULE for using a provider function is that
# function you provide to it must contain a property named
# $get
# The function assigned to that property is the function that
# will be called by Angular to create your service. 
# The service will then be represented by the return value
# of that function. 
# Creating services withe the provider function is a little more 
# complicated than the other techniques we'll look at. 
# The benefit it offers in exchange for that complexity is the ability
# to configure the underlying provider for your services.  
# None of the other service creation functions allows you to do this. 
# GO TO DEMO. 

# 'Brice' 2.04 of creating services
# "I am using Angular's controllerAs syntax, so I am not injecting
# a scope" !!

# You don't have to inject the provide service into the 
# config function and then call provider directly on the $provide
# service.
# As a convenience, the provider function is also exposed as a function
# directly on the Module object.
#
# angular automatically appends the word 'Provider' to the name
# of the service you specify when creating the underlying provider for
# the service
#
# Factory and Service Functions

#1  Using $provide.factory()
# Simple version of provider when addtional configuration is unnecessary. 
# Registes a service factory function that will return a service instance
# The following is the Angular Source code for the factory function

function factory(name, factoryFn, enforce) {
    return provider(name, {
		    $get : enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
		});
	}

#2 using $provide.service()
# Calls factory function which calls provider function
# Executes constructor function with "new" operator
# Angular source code for $provide.service()

function service(name, constructor) {
    return factory(name, ['$injector', function ($injector) {
		    return $injector.instantiate(constructor);
		}]);
	}

# The service function is just a very thin wrapper around the
# factory function.  The only difference is that the function
# you pass to the service method will be treated as a constructor
# function and called with the javaScript 'new' operator
# It uses the instantiate method of the injector to pass
# to call the function you pass to the service method.
# The instantiate method will then use the new operator
# to execute the function that creates the service. 

# You would use the service method instead of the factory method
# if you specifically needed your function to be treated as
# a constructor and called witht the 'new' operator. 
# There are several reasons why you might want that behaviour.
# One is if you defined an inheritance hierarchy in your code.
# Creating an instance with 'new' will make sure that
# your instantiated object properly inherits from
# its prototype. 
# [Demo] BookLogger App ...

#3 Value and Constant Services
#3a The Value Service
# The 'value' function is just shorthand for calling 
# the factory function with no parameters. 
# If you don't need to inject anything into your factory
# function you can use the value function instead. 

#3b The constant function is not a short-hand version of anything. 
# It simply registers service with injector, no factory/provider calls.
# It allows you to register an object literal function or some other constant
# with the inject, but it doesn't call the service, factory or provider methods
# behind the scenes. 

# A value service can't be injected into a module configuration function but
# a constant service can. 

# Final difference concerns decorators.  Decorators are a way to over-ride
# or modify the bahaviour of an existing service.
# Value services CAN be overridden by AngularJS decorators, but 
# constant services CANNOT. 

# The syntax for both types of service is very similar and straight-forward.
# [Demo BookLogger project] 

# Brice 'Remember services created with the value function are just thin
# wrappers around the factory function. You can use 'value' instead of 
# 'factory' if you don't need to injecct anything into the new service you
# are creating. 
#
# The object that is passed to represent the service in the example just
# has a single property, which is the retriveBadge function below 
#
angular.module('app)
    .value('badgeService, {
		    retrieveBadge: retriveBadge
		});

function retrieveBadge(minutesRead) {
  // my function stuff
	}

# CAN inject constant service into an app.config module, but if you try to
# inject a value service such as badgeService into the app.config module get the following
# error in console

Uncaught Error: [$injector:modulerr] Failed to instantiate module app due to:
Error: [$injector:unpr] Unknown provider: badgeService

# THIS IS IMPORTANT. This is not an error specific to value services. You also cannot inject
# services creates with the factory or service functions.  You can only inject the underlying
# PROVIDER for those services (or a constant service as we saw earlier) 
# Remember that angular creates an underlying provider for services defined with the
# factory and service functions.  THE NAME OF THE PROVIDER is the name of the service
# with the word 'provider' appended to the end.  Injecting in badgeServiceProvider WORKS!! 
# also dataServiceProvider works !

# Dependency Annotations
# Exist for a couple of resons
#1 They inform the injector what services to inject
#2 They suppor minification of javaScript code
# Minification may result in mangled parameter names that causes all code to break

# There are THREE ways to annotate dependencies

#1 Implicitly from function paramater names
#(that's just what we have done so far) - and it is the simplest technique
# But out code would stop working if we tried to minify. 
#2 Use the  $inject property annotation
#You can assign to the inject property of a service an array of the service names
# that should be injected into the service. 
#3 Using the inline array annotation  (Probably the most common)
# To do this, pass an array of strings which are the dependencies as the
# second parameter to your service creation function. The last parameter of the
# array is the function that will create or represent the service. 
# [BookLogger demo] 

# Common Built-in Services

# Promises and the $q service
# the $q service makes it easier to implement asynchronous patterns
# in your angular app. 
#
# The $q service is often referred to as a 'promise library'

# Let's start by defining promises.
# A nice definition by Martin Fowler
# ' In JavaScript, promises are objects that represent the pending result
# of an asynchronous operation'
# See here
http://martinfowler.com/bliki/JavascriptPromise.html
# The $q service is actually more than just a promise library.
# A promise is the pending result of an asynchronous operation.
# The $q service provides an API for working with promises.
# But is also provides an API for so-called deferred objects that
# return promises to the calling code and signal them with results 
# when the asynchronous operation is complete. 

# Asynchronous calls with $q
# There are two parts. 
# We can think of the two parts as a Client and a Service (sic)
# The Client is a component or function that wants to perform
# some work asynchronously.
# The Service is the component that will actually perform the work,
# and notify the client when the work is complete. 
#1 The first thing a client will do is initiate an asynchronous call to the Service
#2 When the Service receives the call it will first use the $q service to 
#  create a new deferred object. The deferred object will act as a conduit through
#  which the service can communicate the status of the asycchronous work back to the client.
#  The deferred object will immediately return a promise back to the client.
#  This will prevent the call to the service from blocking execution while the work 
#  is performed. 
#3 Once the promise is received by the client,  the client can use the promie API to configure 
#  callback functions that execute when the work in the Service is complete. It may also
#  go about its business performing other work. 
#4 Meanwhile, the Service is performing the work the Client requested. 
#5 When the work is complete, the Service uses the deferred API to signal the status
#  of the work (complete, error) to the Client. 
#6 The client executes the appropiate callback function. 
# BookLogger App.  

# $timeout is just a wrapper around the javaScript timeout function
# $timeout takes two arguments.  The first is the function you want to execute;
# the second is the delay in milliseconds. 

#The first two parameters to the then function are 'success'and 'error' callbacks. 
# The first defines the function that should execute if the deferred object in the
# service is resolved successfully with the resolve function
# The second defines the function that should execute if the deferred object is rejected. 
# COULD define as in-line anonymous functions, but Brice thinks that it would be better
# (easier to read) to define as named functions. 

# The deferred object is also capable of another neat trick
# In addition to reporting the success or failure of the work
# being performed, it can also send notifications back to the
# caller WHILE the work is being performed. 
# In order to send messages about the status of the work
# You just call the notify function on the deferred object,
# and pass it the message you want to send to the caller. 

# The 'then' function may take a third parameter.  The
# third parameter is the function that should handle notifications 

# We have seen how to handle the rejection of the promise by specfiying 
# a callback function as the second parameter to the 'then' function
# However, there is actually a better way to handle the rejection of the
# promise as well as other errors that may occur.
# In addition to the 'then' function, promise objects also have a 
# function called 'catch'.  You pass to it a function that will
# handle errors in much the same way as the second parm to the 
# 'then' function handles errors. The 'catch' function is particularly
# useful when you chain it together with the 'then' function.
# The 'then' function also returns a promise, which means you can
# call the 'catch' function on its return value. 
service.returnsPromise()
    .then(successFn)
        .then(allErrorsFn)

# This is a much more robust solution 

# And finally there is the 'finally' function, which can also
# be chained to the 'then' and 'catch' functions.
# It allows you to define a callback that will be executed regardless
# of whether the promise was resolved or rejected. 
# It is a great place to put in cleanup code you want to make sure is
# executed regardless of the result of the promise. 

# Final technique that may be used with promises

# It is possible to wait on an entire array of promises to be resolved 
# before taking some action.
$q.all([booksPromise, readersPromise])
    .then(getAllDataSuccess)
		    .catch(getAllDataError)
# The 'all' function will return a promise when 
# all of the promises in the array have been 
# resolved or rejected. 
# We can then process that promise by calling 'then' and 'catch'
# etc. just like any other promise. 
# The one additional wrinkle is that the data passed
# to the success handler (named dataArray in code eg)
# is actually an array of the data returned from 
# the promises in the array. 
# The data will be returned in the same index position
# as the promise it goes with in the array passed to the
# all function. 
#
# Routing Overview
# Important.  Angular Source Code for Routes Service

var ngRouteModule = angular.module('ngRoute', ['ng'])
                            .provider('$route, $RouteProvider)

# Remember that only services that are created with the provider function
# are configurable in the module's config function.
# The routes service IS configured with the provider function, using code we
# might write ourselves to create a configurable service.  
# Note that the service being created is named '$route', which means that angular
# will create an underlying provider by appending the word 'provider' to the
# end of the service name. 
# Therefore, we will be injecting $RouteProvider into our modules config function
# in order to configure our routes. 

# $routeParams is a service that allows you to retrive values passed as params
# in the url. 

# otherwise function (routes)
# Brice 'It is worth noting that in Angular prior to version 1.3, you had to pass
# a route config object to 'otherwise' function. You still can, but if the route you
# want to redirect to already has an entry in a 'when' routes function, you can just
# pass the string that represents the route. 

# the filter function works on arrays, and returns an array. 

# Resolve Property.  
# The resolve property is another property available on
# the route configuration object that allows you to specify a list of dependencies that
# will be injected into the controller when changing to the route. 
# Most of the time you will configure that dependency to be a promise. 
# When that is the case, the router will wait for the promise to be resolved before
# continuing to the route. 


.when('/EditBook/:bookID, {
    templateUrl: '',
		controller: '',
		controllerAs: '',
		resolve: {
        books: function (dataService) {
				    return dataService.getAllBooks();
				}
		}
});


# You set resolve property equal to an object,
# where each property on the object represents a 
# dependency that the router will wait on.
# In above, just one named 'books'
# It is set to a function that will return a promise
# so that the router will wait for the promise to resolve.
# In this case, the asynchronous call is retrieving data that
# will will be displayed in the view. 
# So that by defining the resolve here, we can wait for the
# data to be available before displaying the new view. 
# This can get rid of the problem you see occasionaly where 
# a form will appear first followed a second or so later by 
# the data 
# In order to access the data returned from the promise, we just
# need to inject the property we defined on the resolve 
# into the controller. 
# Since Brice named it 'books', just need to inject 'books' into the controller. 
# That parameter will then contain the result of the resolve promise. 

# $route Events 
# The events fired when using the routes service 
# There are several events fired related to routing
# AND THESE ARE ALL BROADCAST on the $rootScope !!
# In order to handle them, need to inject $rootScope to define 
# event handlers.
# use $rootScope.$on() to specify event types to listen for. 
# The $route service defines four events
#1 $routeChangeStart
#  Fired BEFORE a route change while dependencies are resolved
#  and view templates are retrieved.
#2 $routeChangeSuccess
#  Fires after all dependencies have been resolved. 
#  This triggers the instantiation of the controller to be used
#  on the new route. 
#3 $routeChangeError
#  Fires if any resolve properties are rejected. 
#4 $routeUpdate 
#  Fires when routes are being updated, and the same 
#  instance of the controller will be used. 
#  [Demo BookLogger]
#
# Angular modules have a function called 'run' when you can use to
# add  any initialization code your module may need. 

# $cookies and $cookieStore

# Cookies have been around seemingly forever, but they are still
# a convenient way to store small bits of data on the client. 
# Angular makes it easy to continue to do that. 
# The cookies services are available in the ngCookies module. 
# If all you need to do is store a string value, you can use the $cookies service
# Just inject it where you need it and inject a new property on it to hold the string
# you want to store. You can retrieve it later by referring to the property you defined. 

# If you need to store an OBJECT, you can use the $cookieStore service.  
# It is 
# 	1 Serialized/deserialized to and from JSON
# 	2 get(key)
# 	3 put (key, value)
# 	4 remove(key)
# Using this service only slightly more complex than using the $cookies service. 
# Each object is stored with a key, which is string. 
# You create a new cookie by calling the 'put' function on the service
# and passing it a key and the object you want to store. 
# You can then retrive the object by calling the 'get' function with
# the key, or delete it by calling remove. 
# You can easily create cookies in one service or controller and retrieve them
# in another.
# However, do NOT be tempted to use cookies to share data among controllers. 
# A better way is to use custom services, covered in a later module. 

# $log service.
# We have seen Brice use 'console.log' in demos, which can be a handy 
# debugging technique. 
# The $log service was built with this in mind, and is just a simple wrapper 
# around the most common functions on the console object.
# functions:
#  log()
#  info()
#  warn();
#  error();
#  debug();

# Each of these functions just take a string as a parameter and output
# to console by default. 

# There is one small configurable piece you may want to take advantage of:
# You can configure whether  or not calls to debug will be shown in the console
# using the $logProvider.  
# This can be handy as you can sprinkle calls to debug throught your code during 
# development, and then as part of a production build process, disable the
# outputting of those messages so your users will never see them. 
# The $log service is very simple, but it can be made considerably more interesting
# through the use of decorators. 
# There is an entire module dedicated to decorators later in the course! 
# [Demo BookLogger]

# To disable $log.debug 
#1 Inject $logProvider into app.config (in app.js)
#2 call the following
$logProvider.debugEnabled(false);

# Networking 
#1 $HTTP Service 
# It is just a function
# You pass to is a configuration OBJECT that specifies the details
# about the type of request and the how it should be performed.
# The function RETURNS a promise just like any other promise
# except that there are two additional methods: success and error. 
# The $http configuration object contains all the details about
# how the request should be executed.  It is just an object literal
# you pass to the $Http service
# The method property specifies the HTTP verb
# The url property is where you speicify url
# where the request should be sent. May be specified
# as absolute or relative url. 
# The params property lets you specify key-value pairs that
# will be APPENDED to the url 
# The data property is used to send data to the server
# Essentially the body of the $HTTP request
# The headers property is an object that allow you to 
# specify addtional HTTP headers to include with the request
# The cache property is a simple boolean that specifies whether
# or not Angular should cache the request. If set to 'true', the
# request will be cached in the default HTTP cache. 'False' will
# disable caching. You can also specify a cache object if you want
# to perform caching using something other than the default. 

# Now let's talk about the RESPONSE OBJECT that the HTTP request
# generates.
# The first thing to note is that is does not actually return
# a response object.  It returns a promise, and the response object
# will be passed as a parameter to the callback functions that
# process the promise. 
# Contains serveral properties
# The data property contains the body of the response. If you
# were making a request for JSON data, for example, the raw
# JSON would be stored in the JSON property
# The STATUS property contains the HTTP status code
# - 200 for OK, 404 for not found.
# the statusText property contains the corresponding HTTP
# status message. 
# You can use the headers property to access the Http response
# headers. This property actually returns a function and you
# pass to it an optional header name. 
# Finally the config property contains the config object that was
# passed to the HTTP service when the request was made. You have
# access to everything about the request while working with the response. 

# Promises returned flrom %http

$http({ 
    method: 'GET',
		url: 'api/books'
		})
		.success(function(data, status, headers, config) {
		    // do success stuff
		})
		.error(function(data, status, headers, config) {
		    // do error stuff
				});

# The 'success' and 'error' functions are just convenient
# addtional functions that give you a way to register 
# callbacks to process the HTTP response. 
# Responses for the statuss  code between 200 and 299 are
# considered successful and will trigger the success callback.
# Any other status code will trigger the error callback 
#
# The success and error functions are each passed a function as
# a parameter.  Those functions are passed a decomposed version
# of a HTTP response object. Rather than receiving a single parameter
# that is the response object, these functions receive four
# different parameters containing data available in the response. 
# It is for this reason that Bryce DO NOT normally use the
# 'success' and 'error' functions. He thinks that sticking to the
# normal promise API produces cleaner, simpler and more consistent
# code. But nearly identical to how AJAX responses are processed
# in jQuery. But learn how to use promise API. 

# HOW to return a promise from a HTTP call

function getAllBooks () {
    return $http({
		    method: 'GET',
				url: 	  'api/books'
		});
}

# VERY easy to write code such as the above
# HOWEVER, a couple of reasons Bryce does not like!
#1 Forces the caller to process the http response object
#  in order to get the data it was requesting. 
#2 This technique exposes the  details of how the data are
#  gathered which are leaked to other components. 
# Better to encapuslate those details inside the service
# making the HTTP call, and only expose to the caller the data
# it wants. 
# Let's look at example

# Abstract HTTP Response Away from Caller
function (getAllBooks) {
    
		return $http({
		    method: 'GET',
				url:    'api/books'
		})
		.then(sendResponseData)
		.catch(sendGetBooksError)

}

function sendResponseData(response) {
    return response.data;

		function sendResponseData(response) {
	
	    return response.data;
	}

	function sendGetBooksError(response) {
	    return $q.reject('Error' + response.status);
	}

	function sendResponseData(response) {

    return response.data;
}

function sendGetBooksError(response) {
    return $q.reject('Error' + response.status);
}

function sendResponseData(response) {
    return response.data;
}

function sendGetBooksError(response) {
    return $q.reject('Error' + response.status);
}

function sendResponseData(response) {
    return response.data;
}

function sendGetBooksError(response) {
    return $q.reject('Error' + response.status);
}

function sendResponseData(response) {
    return response.data;
}

function sendGetBooksError(response) {
    return $q.reject('Error' + response.status);
}

function sendResponseData(response) {
    return response.data;
}

function sendGetBooksError(response) {
    return $q.reject('Error' + response.status);
}

# In the above code, rather than simply return the
# promise from the HTTP call, I chain it to a call to
# 'then' and 'catch'. That allows me to process the
# response with the callback passed to those functions
# and still return a promise to the caller, since 'then'
# and 'catch' both return promises. 
# The parameters passed to 'then' and 'catch' will be the
# HTTP response object. This allows me to encapsulate 
# all the details of dealing with HTTP right here in my
# data servcice.  The caller, which is probably on of the
# controllers in my app, can just call 'getAllBooks() and 
# not worry about the details. 
# The data service can now examine the response object and
# take whataever action is necessary. 
# The details of how the data are gathered and processed. 
# are encapsulated in the data service. The calling controller
# can just make a call to 'getAllBooks()' and know that the
# promise returned will either be resolved with exactly the 
# data it needs, or a reason why it was unavailable. 

# Rest-ful Services
# Representational State transfer
# An architectural pattern for moving data around
# Brice prefers the terms 'Web API' or 'HTTP API' to
# 'REST', as the latter term can have a lot of baggage.
# REST 
#1 Uses HTTP verbs to speify CRUD operations
#2 Use URL conventions to address individual
#  as well as collections of resources
#3 HTTP response codes indicate the server action for
#  success/failure
# Examples
# CREATE
#     POST http://localhost/api/books
#     If successful, return HTTP 201 created
# READ
#     GET http://localhost/api/books OR http://localhost/api/books/5
#     If successful, return HTTP 200 success
# UPDATE
#     PUT http://localhost/api/books/5
#     If successful, return HTTP 204 No Content
# DELETE
#     DELETE http://localhost/api/books/5
#     If successful, return HTTP 204 No Content

# No need to send anything in the body of a delete request.

# [Demo BookLogger]
# In demo, will replace data hardcoded in dataService with actual
# data in Web service. 
# Just as a quic reminder, the Webservice for the BookLogger app is
# a very simple nodejs application. All of the required code and
# files are included with the downloads, and IS ALL INSIDE THE
# SERVER FOLDER. 
# All data stored in simple text files (no db connections to bother with)

# $Http Shortcue methods
# In demo, make all HTTP calls using the $http service as a function. That technique
# gives you the most flexibility. 
# Shortcuts.
# The function names on the shortcut service match the HTTP verb that will
# be used for the request. 
#1  GET shortcut
  $http.get(url, [config]) #  config object is optional
#2  DELETE shortcut
  $http.delete(url, [config]) 
#3 POST shortcut
  $http.post(url, data, [config])
#4 PUT
  $http.put(url, data, [config]) 

# Other shortcut functions available are HEAD, JSONP and PATCH

# All shortcut functions take url as first parameter, and can optionally
# pass them a configuration object. 
# [DEMO BookLoggger]
#
# Transforming Requests and Responses.
# It can be helpful to shape 'third-party' data before it is
# send to or received by the server. 
# Angular provides a mechanism for transforming data sent and received by
# the $HTTP service so that the client and server always get it in exactly
# the same form.
# A transformation function conceptually sits between the client application
# and the server. It can then examine the data send in the body of a http
# request and manipulate it, before letting it continue on its way to the
# server.  
# Similarly, you can also configure a transformation function to receive
# data from the server and transform it before handing it off to the client. 

# Transformations can be a single function or an array of functions.
# If it is AN ARRAY, each of the funcions will be applied in the order
# that they appear in the array. 
# Angular provides default transformations for both requests and responses.
$http.defaults.transformRequest
$http.defaults.transformResponse
# They can be accessed as properties on the $http.defaults object. 
# Can override defaults on $http configuration object

# Interceptors
# Conceptually similar to transformations. 
# Interceptors give you a method to intercept  and modify
# the $http object before a request is sent to the server
# and the response objects before they are handed over to your
# application.  
# They are implementes as a service factory, and you use them my
# adding them to the $httpProvider.inceptors array. 
# There are two kinds of interceptors
# Request and Response.
# There are also two kinds of rejection interceptors, which
# intercept errors related to request and responses. 
# [Demo Book Logger] 
# Interceptors are implemented as Services

# Last big topic of this module
# $resource Service
# Essenntially an abstraction layer above $http
# Works with REST-ful web services
# So if the web service you are using generally follows the REST
# guidlines (outlined above), then the $resouce service can 
# provide you with a quick and easy way to hook up your app
# to that service. 
# The service is a FACTORY that returns the resource with commonly
# used server methods aleady implemented. 
# For instance, it includes methods to query a collection of
# items from the server, as well as a method to query an individual
# item.
# Equivalent to the getAllBooks and getBookByID implemented in 
# BookLoggger app. 
# It also includes methods to add and delete items. 

# The biggest benefit of the $resource service is that it allows
# you to quickly connect your  app to a web service with a lot less
# initial code than you might write if you were using the $http service
# directly. 
# One important concept to understand while working with the $resource service
# it the differece between $resouce CLASSES and INSTANCES
# These are terms used in Angular documentation
# A resource CLASS in the value returned from directly calling 
# the $resource service

#  // Create a resource "class"

  var Books = $resource('/api/books/:book_id');

# You pass the service a url template, and optionally some 
# configuration information, and it returns what the documentation
# calls a $resource class. The class has some default methods that
# allow you to interact with data available at the specified url

# You can use the $resource class to retrieve $rescource instances

# // Create a resouce "instance"

  var book = Books.get({book_id: 5});

# In the above example, Brice is calling the 'get' method on the
# class to retrived the book with a book_id of 5
# The specific book retrieved is a RESOURCE INSTANCE
# It will have all the normal book properties like 'title', 'author' etc
# but it willl also have the same set of methods that are defined on the
# $resouce class, so that you can easily perform operations on that 
# particular instance.

# There ARE some difference in the properties and  methods
# available on $resource classes and $resource instances. 
#1 Classes
get() # retrieve a particular item
save() # create a new item
query() # allows you to retrive all items
remove()
delete()
# Custom methods may also be defined

#2 Instances (similar but additional items)
# Have all the entity properties you would expect (title, author, etc) 
$promise  # // access to the underlying promise when communicating with
# the server asynchronously
$resolved # A boolean that lets you know if the promise has been resolved
#yet or not 
# Instances also include a set of methods that match those on the $resource
# class
$get()
$save()
$query()
$remove()
$delete()
# Custom methods (with $ prefix) 

# Brice prefers $http over $resoure because of the control the former offers. 
# Will demonstrate a 'quick and easy' data service, to allow quick wiring up
# of CRUD functionality

# Caching and Sharing Data
# Topic 1: $cacheFactor
# Topic 2: Caching $http requests
# Topic 3: Custom services to share data between controllers in your app

# There are a number of ways to solve the data sharing problem, bu Brice thinks
# services are a clean and simple way to encapsulate similar functionality 
# and data so that it can be used whereever it is needed. 

# Caching data in angular begins with cache factory service, $cacheFactory
# $cacheFactory creates cache objects
# The data you want to store is associated with cache object
# Will probably find that get most benefit from caching by using it in
# conjunction with the $http service

# Using the $cacheFactory 

var dataCache = $cacheFactory('bookLoggerCache');

# To create a new cache object, you call the service like a function
# and pass it a string that will be the name of the newly created object
# To retrieve a previously created object from cache factory,
# just call 'get' method. 

var dataCache = $cacheFactory.get('bookLoggerCache');

# By injecting the cache factory service into different controllers,
# you can retrieve and access the data on a cache object in multiple
# controllers and in multiple places in you app
# One method for shaing data. Can also use custom services.
# It is cache OBJECTS that are used to manage data in caches 
# Cache objects have several straightforward methods on them
put(key, value) # // Adds a new value to the object
#Pass it a key, which is the way you will refer to the value
# followed by the value you want to store.
get(key) # // To retrive a value 
remove(key) 
removeAll() 
destroy()  # // deletes the entire cache object, and remove it from set
# objects maintained by the cache factory. 
info () # // returns some basic info about the cache object, such as
# name and size. 
# [Demo] BookLogger App. 
# Add a new feature to the bookLogger app.
# Want to gather and calculate some very basic summary data about the 
# number of books and readers. Want to display on Home screen of App, but I
# don't want to retrive and calculate it every time the screen loads. 
# So we will cache it until we determine the source data has changed. 
# First thing need to do in inject the $cacheFactory ... 
# [Demo, BookLogger ...]

# $Http Caching
# To enable caching for an http request, set
# the cache property on the http configuration object to TRUE
# Angular will then cache $httpResponse object in the default $http
# cache.
# If you would prefer to cache the response in your own cache object, you
# can specify that object as the value of cache property instead of simply
# specifying 'true'
# As we have already seen, items are stored in cache objects as
# key-value pairs.  When you cache an http request, the URL is the
# cache key (that is, the url specified on the http config object) 
# The actual value that is cached is the http response object. 
# The promise returned from the http service will be resolved with the
# cached response object. 
# The processing of the call will behave as if the call had actually gone
# to the server.  

# $httpCacheObjects
# // use the default $http cache object

  return $http({
	    method: 'GET',
			url:    'api/books',
			cache:  true
			});

# // use a custom cache object

  var dataCache = $cacheFactory.get('bookLoggerCache');
  return $http({
	    method: 'GET',
			url:    'api/books',
			cache:  dataCache
			});

# [Demo BookLogger]

Hilton Giesenow Intro to Visual Studio (Skillsoft video) 

python -V  (note capital)

Guido van Rossum in the late eighties and early nineties
at the National Research Institute for Mathematics and Computer
Science, Netherlands
 
Multiplication higher precedence than add substract *>+
4+3*8 // 28
3*8+4 // 28

In Python, a variable must be assigned an intial value ('initialized')
in the statement that declares it 
a=8
a=b=c=9
a,b,c = 1,2,3

dynamic typing //loosely typed 
String values must be enclosed within quotes

Comments in python: #
Multi-line comments: enclose in triple quotation marks

TODO-1
comparison operators: compare ascii codes if string


Logical AND operator will evaluate two operands and return True only if
both operands are themselves true

Logical Or will return True if either one of operands returns True

Logical not is unary operator. Returns inverse of operand a = not a 

In python, Boolean values may also be represented numerically by
1=True and False is zero

note that False and False returns False // !!


input() accepts a string as arg that will prompt user for input by 
displaying the sting (and then wait)
  // user input is read as string (even if integer entered)

print function. 
//Multiple values can be displayed as comma-separated list, 
separated by single space by default
// alt separator by adding sep paramater, eg sep='**'
// invisible \n at end of line //default
// alt end by end="!" 

Three types of error in Python

Syntax // missing comma
Runtime // title as variable BUT print(tietle)
Semantic // precedence not properly defined // no error reported

python uses indentation to group statements into code blocks

python 2.7 is final version of 2.x branch

Python does NOT have a ternary operator, but has a 'conditional expression'


if-true-return-this if(test-expression) else if-fasle-return-this

c=a if(a<b) else b

expression: returns a value
statement: need not, but statement consists of more than one expression

PRECEDENCE
    ()
    exponentiat
	+x -x ~x // unary
	* / // % @ // @ is Matrix Multiplication
	+ - add/subtract
	BITWISE << >>
	BITWISE &
	BITWISE XOR (^)
	BITWISE OR (|)
	COMPARISON in, not in, is, is not, < <= > >= != ==
	[ASSIGNMENT and COMPOUND ASSIGNMENT here?]
	BOOLEAN NOT not 
	BOOLEAN AND and
	BOOLEAN OR  or
	LAMBDA 
	ASSIGNMENT EXPRESSION :=
	
CASTING
	
   int(x) converts x to integer
   float(x) 
   str(x)
   unichr(x) //converts integer x to a Unicode character
             // BUT this is python 2 fn
			 // In python 3 replaced by chr
			 // https://stackoverflow.com/a/2352047/499167
			 
	chr(i) Return the string representing a character whose Unicode
	    code point is the integer i 
	    chr(97) is a. The inverse of ord()
	
	ord(c) Given a string representing one unicode charaster, 
	    returns an integer representing the unicode code point of that character.
		ord('a') returns 97
	hex(x) convert an integer to lowercase hexadecimal prefixed with 0x
	hex(255) // 'oxff'
	type(object) with one arg, returns the type of object
    
	
	

REF
    https://www.tutorialspoint.com/python/operators_precedence_example.htm
    http://www.mathcs.emory.edu/~valerie/courses/fall10/155/resources/op_precedence.html
    https://www.examtray.com/index.php/python/last-minute-python-operator-priority-precedence-examples-tutorial

REF (Definitive)
    https://docs.python.org/3/reference/expressions.html#operator-summary
	   [but why no assignment operators in this list??]
	

BUILT-IN FUNCTIONS 
    https://docs.python.org/3/library/functions.html
	//python site, 3.9v
	
XOR and swap to variables

   a=30
   b=5
   a^=b
   b^=a
   a^=b
   print('a is', a) // 5
   print('b is', b) // 30


BITWISE
    | // OR
	& // AND
	~ // Unary NOT //Complement 
	
BITWISE operators compare binary numbers
LOGICAL operators compare BOOLEAN Values


DEFINITIVE REF on PYTHON BITWISE OPERATORS

    FAQ: What do the operators <<, >>, &, |, ~, and ^ do?
    https://wiki.python.org/moin/BitwiseOperators
	
BITWISE OPERATORS	
	
    PytVhon doesn't use 8-bit numbers. 
	It USED to use however many bits were native to your machine, but since that was non-portable, 
	it has recently switched to using an INFINITE number of bits. 
	Thus the number -5 is treated by bitwise operators as if it were written
	"...1111111111111111111011".
	
TWO's COMPLEMENT BINARY FOR NEGATIVE INTEGERS

  https://wiki.python.org/moin/BitwiseOperators
  https://en.wikipedia.org/wiki/Two's_complement
  
  A two's complement binary is same as the classical binary representation for positve integers
  but is slightly different for negative numbers
  
  Negative numbers are represented by performing the two's complement operation on their absolute value
  
  Negative numbers are written with a leading one instead of a leading zero

  So if you are using only 8 bits for your twos-complement numbers, 
  then you treat patterns from "00000000" to "01111111" 
  as the whole numbers from 0 to 127, and reserve "1xxxxxxx" 
  for writing negative numbers.
  
  (i) SUBTRACT ONE FROM POSITIVE INTEGER, INVERT BITS
      A negative number, -x, is written using the bit pattern for (x-1)
      with all of the bits complemented (switched from 1 to 0 or 0 to 1)
	  
  (ii) INVERT BITS, ADD ONE 
  
	So -1 is complement(1 - 1) = complement(0) = "11111111", 
	OR -1 is Complement(1) +1 = "11111110"+1   = "11111111"
	
	-10 is complement(10 - 1) = complement(9) = complement("00001001") = "11110110"
	OR -10 is complement(10) +1 = "11110101"+1  = "11110110"
	 
	This means that negative numbers go all the way down to -128 ("10000000"). 
	
	The two's complement of an N-bit number is defined as its complement with respect to 
	2^N; the sum of a number and its two's complement is 2^N.
	
	Two's complement is the most common method of representing signed integers on computers
	
	x << y
	
	Returns x with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). 
	This is the same as multiplying x by 2**y. 8<<2 is 32

    x >> y

    Returns x with the bits shifted to the right by y places. 
	This is the same as //'ing x by 2**y.

    x & y
    Does a "bitwise and". 
	Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it's 0. 
	
	x | y
	Does a "bitwise or". 
	Each bit of the output is 0 if the corresponding bit of x AND of y is 0, otherwise it's 1.

    ~ x
    Returns the complement of x - the number you get by switching each 1 for a 0 and each 0 for a 1. 
	This is the same as -x - 1.	
	
	x ^ y
	
	Does a "bitwise exclusive or". 
	Each bit of the output is the same as the corresponding bit in x if that bit in y is 0, 
	and it's the complement of the bit in x if that bit in y is 1. 
	
	//
	
	a=b=c=10
	a,b,c = 10,20,30
	
	nums=[0,1,2,3]
	nums[0]
	lists are zero-based!
	list of strings can be considered a multi-dimensional list
	name=["thomas", "dowling"]
	name[1][0] // 'd'
	print(name[1][-1]) // 'g'
	
THE PYTHON TUTORIAL

https://docs.python.org/3/tutorial/index.html

PYTHON LISTS

   written as a list of comma-separated values (items) between square brackets. 
   Lists might contain items of different types, but usually the items all have the same type.
   KEY REF
       https://docs.python.org/3/tutorial/introduction.html#lists
	   
   squares = [1, 4, 9, 16, 25]
   squares[0]
   squares[-1]
   squares[-3:]
   squares[:]
   squares + [36, 49, 64, 81, 100]
   
   cubes = [1, 8, 27, 65, 125]
   cubes[3] = 64
   cubes.append(216)
   cubes.append(7 ** 3)]
   
   letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
   letters[2:5] = ['C', 'D', 'E']
   letters[2:5] = []                     // Now remove them
   letters[:] = []
   len(letters)
   
   list.append(x)
   list.extend(L)
   list.insert(i,x)
   list.remove(x)  // removes x
   list.index(x)
   list.pop()   // pops and returns it 
   list.pop(i)  // pops and returns it
   list.count(x)
   list.sort()   // IN PLACE  // ! Mutates
   list.reverse() // IN PLACE // ! Mutates
   len(list)  // NOT list.len() !! 
   x = ["apple", "banana", "cherry"]
   del x[0]
   del(x[0:1]) // same thing
   del(x[0:2]  // just 'cherry' left
   
PYTHON SLICE NOTATION 
   a[start:stop]  # items start through stop-1
   a[start:]      # items start through the rest of the array
   a[:stop]       # items from the beginning through stop-1
   


   
   a[:]           # a copy of the whole array
   
   KEY REFERENCE
   Understanding slice notation
   https://stackoverflow.com/questions/509211/understanding-slice-notation   
   
   
PYTHON TUPLE (IMMUTABLE LIST)
   
   https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
   
   
    A tuple consists of a number of values separated by commas
    output tuples are always enclosed in parentheses
    they may be input with or without surrounding parentheses, although often parentheses are necessary
	is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, 
	such as lists
	Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed 
	via unpacking or indexing (or even by attribute in the case of namedtuples)
	
	tup="Thomas", "Gerard","Someone"  // tuple packing
	type(tup) //tuple
	w,x,y= "thomas","Gerry", "Domeone"  // SEQUENCE unpacking
	tup="Red","Green","Red","Green"
	
	thistuple = ("apple")
    print(type(thistuple))
	<class 'str'>            // note

    thistuple = ("apple",)   // note the comma
    print(type(thistuple))
	
	<class 'tuple'>
	
	t = 12345, 54321, 'hello!'
	t[0]
	u = t, (1, 2, 3, 4, 5)
	u // ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
	
	Tuples are immutable, but MAY CONTAIN IMMUTABLE OBJECTS!
	v = ([1, 2, 3], [3, 2, 1])
	v[0]=[1,2,3] // TypeError: 'tuple' object does not support item assignment
    v[0][0]=100
	v // ([100, 2, 3], [3, 2, 1])
	
	A SPECIAL PROBLEM  is the construction of tuples containing 0 or 1 items:
	   the syntax has some extra quirks to accommodate these.
	   Empty tuples are constructed by an empty pair of parentheses; 
	   a tuple with one item is constructed by following a value with a comma 
	  (it is not sufficient to enclose a single value in parentheses). 
	   Ugly, but effective. 
	   
	   empty = ()
	   type(empty) // str
	   
	   fakesingleton =("Apple")
	   type(fakesingleton) // str // !!
	   
	   singleton=("Apple",)  // Note comma !!
	   type(singleton) // tuple 
	   
	   "Note that multiple assignment is really just a combination of tuple packing 
	   and sequence unpacking." (Python doc, data structures)
	   
	
	
	
PYTHON SET 



	
	
Python precedence again

     'Hello'+ '!'*10  //'Hello!!!!!!!!!!'

Python Lists  again
 
    list.sort(reverse=True)
	
	new_list=sorted(courses)  // Sort but NOT in place.  Function vs Method !!
	min(nums)
	max(nums)
	sums(num)
	
	my_courses.index('Physics') //2 
	my_coursed.index('Art)  // Not there // index error !!!!
	'Art' in my_courses     // False
	'Physics in my_courses // True
	
	
    for item in my_courses:  // note colon
        print(item)          // note indent
		
	for index, item in enumerate(my_courses):
	    print(item) 
		
	// 0 History
    // 1 Math
    // 2 Physics
    // 3 CompSci
	
	for index, item in enumerate(my_courses,start=100):
	print(index,item)
	
	// 100 History
    // 101 Math
    // 102 Physics
    // 103 CompSci
	
	str_courses = ' - '.join(my_courses)
	print(str_courses)
	// 'History - Math - Physics - CompSci'
	new_list= str_courses.split(' - ')
	print(new_list)
    // ['History', 'Math', 'Physics', 'CompSci']
	type(new_list)
    //  <class 'list'>
	
	
	 
F-Strings 

  Python 3's f-Strings: An Improved String Formatting Syntax (Guide)
  https://realpython.com/python-f-strings/  
  
  What is print(f“…”)
  https://stackoverflow.com/questions/57150426/what-is-printf
  How to denote f-strings
  https://www.python.org/dev/peps/pep-0498/#how-to-denote-f-strings
  

PASS BY REFERENCE/VALUE
  JS is pass by value but in the case of objects (including arrays),
  the value passed is a reference to the object 
  
  Robert Heaton. In python object refs are pass by value!
  
  Is Python pass-by-reference or pass-by-value?
  https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/
  
  
  Pass by Reference in Python: Background and Best Practices
  https://realpython.com/python-pass-by-reference/
  // Excellent
  
  Pass by reference vs value in Python
  https://www.geeksforgeeks.org/pass-by-reference-vs-value-in-python/
  
  
  
  Understanding Python's “is” operator
      https://stackoverflow.com/questions/13650293/understanding-pythons-is-operator
  
      You misunderstood what the is operator tests. It tests if two variables point the same object, 
      not if two variables have the same value.
	  
	  The operators is and is not test for object identity: 
	  x is y is true if and only if x and y are the same object.
	  
	N1=[10,20,30,40,50]
    N2=[10,20,30,40,50]
 
    N1==N2 // true
    N1 is N2 // false	
	
	So, A is B is the same as id(A) == id(B)
	
	BUT NOTE 
	a =10
	b=10  
	a is b // True // !!
	
	aa=[10]
	bb=[10]
	a is b  // False // !!
	
	
	>>> x = 'a' 
    >>> x += 'bc'
    >>> y = 'abc'
    >>> x == y // True
    >>> x is y // False
	
	So, why aren't they the same string? Especially given this:

    >>> z = 'abc'
    >>> w = 'abc'
    >>> z is w //True

   Key ref for above question (N1, N2 ...) 
      https://www.youtube.com/watch?v=pDCSuFk2Tmw&list=PLXHQlCIVOq0A_YVtNWReO2xb28-g0bhhu&index=15
  
  
  bool() in Python
	https://www.geeksforgeeks.org/bool-in-python/
	
	
Operators in Python	
    https://www.youtube.com/watch?v=L-ndCZRNKm0&list=PLXHQlCIVOq0A_YVtNWReO2xb28-g0bhhu&index=12
    15/5 // 3.0 //!! // Float is putput
	15//5 // 3 // Note !!

   x="Hello"
   x[::-1]  // "olleH"
   
   	Development of an enzyme-linked immunoassay (ELISA) for the early detection of Alzheimer’s disease
   
   
 TODO TWO
bytes (0-256) immutable object video 9 Data types in Python part 4 	

bytearray Mutable 

dictionary: keys must be unique, but may be string or int
           no slicing or indexing
		   
sets no duplicates
frozen set is immutable

KEYWORDS in Python

    30-35 keywords in python
	
	What are Reserved Keywords in Python?
	https://www.tutorialspoint.com/What-are-Reserved-Keywords-in-Python
	>>> import keyword
    >>> keyword.kwlist

IDENTIFIERS IN PYTHON
    Cannot start with number, 123tom is error, but tom123 OK
	underscore OK
	cannot have special characters such as $ sign
	_123tom OK
	_tom Ok
	alphabet symbols, upper or lowercase OK
	_Ram =10  but PRIVATE
	identifier cannot start with digit
	cannot use reserved keyword as identifier // note
	
DATA TYPES in Python

   Mutable and IMMUTABLE
   
     list			tuple
	 set 			int
	 dict			float
					str
   
   
   #14 data types 
   
       int
	   float
	   complex  x = 10 + llj
	   str
	   set
	   dict 
	   tuple 
	   list 
	   frozenset 
	   byte 
	   bytearray 
	   None           // Note   
	   Range 
	   bool
	   
    list, tuple Both collections of heterogeneous data 
    list is mutable
    tuple is immutable 
	
	
INBUILT FUNCTIONS
  print() 
  type()
  id()
  
                

Complex data type
    10 + 11j  // must be 'j'; 'i' does not work
	x=10 + 11j
	print(x.real)  // 10.0 // Note!! 
	x.imag  // 11.0 // Note!!
	
Int data 
    decimal  //0-9
	binary   // 0-1
	octal    // 0-7
	hexadecimal // 0-9 A-F
	
	x = 0b0  //zero-b 
	x= 0o123
	x = 0xff 
	>>> x=8
    >>> print(bin(x))  // bin(x)
    0b1000
	>>> print(oct(x))  // oct(x)
    0o10
	>>> print(hex(x))
    0x8

BOOL Data type
    True/False
	x=True
	x=False
	
	>>> x=0.0
    >>> bool(x)
    False
    >>> x=1
    >>> bool(x)
    True
	>>> x="hello"
    >>> bool(x)
    True
    >>> x=''
    >>> bool(x)
    False
	
x = lambda a, b: a*b
	

	
NEGATIVE INDEXING
   Starts at -1 !!
   ending (both +ve, -ve indexing) is always '-1'
  
SLICING
x[:]
x[::]  // both give full string 
       // this one is steping with default step of 1
       // this one is steping with default step of 1

    >>> ff=[1,2,3,4]
    >>> ff[::]
    [1, 2, 3, 4]
    >>> ff[::2]
    [1, 3]
	x[::-1] REVERSE OF STRING OR ARRAY!! 
	
Dictionary higher priority than set 
type({}) give dictionary // Note

List [] mutable   slice Ok sequential memory storage
tuple () immutable slice OK
set   {} no duplicates no index no slicing 
dictionary key-value pairs. Key can be string/numeric  no slice no index
type({}) give dictionary // Note

bitwise operators work with booleans AND int only

note that &= and |= and ~= are assignment operators!! video 12 nitin
special operators: is in not in
   is memory address comparison
   
 In dictionary, keys must be unique
 
 input() // take data dynamically from user
 
 BODMAS RULE 
 
 How Do I Remember It All ... ? BODMAS !

B Brackets first
O Orders (i.e. Powers and Square Roots, etc.)
DM Division and Multiplication (left-to-right)
AS Addition and Subtraction (left-to-right)

https://www.mathsisfun.com/operation-order-bodmas.html

To delete from a dictionary 
    
	del(mydict['mykey'])
	
	mydict.pop('mykey') 
	
To add to dictionary 
	
    mydict['newKey']='newValue'
    mydict.update({'ciaran': 'pfk'})
	
	'mykey' in mydict //True or False

More dict methods

Note 11.0//3 is 3.0 !!!1

13.444//15 // 0.0 !!!!!

TODO THREE
>>> 10 / True    // 10.0
>>> 10 / False // !! ZeroDivisionError: division by zero
>>> True / True // 1.0 // Note!! 
>>> True  //  1    //  1
>>> True  //  2    //  0
>>> True  //  2.0  //  0.0
>>> 1/True // 1.0  // !! 

>>> 13%14
13
>>> 13//14
0
>>> 

strip()  Remove spaces at the beginning and at the end of the string:

strip()==>It will remove spaces present at left and right sides of the string
lstrip()==>It will remove spaces present at only left side of the string
rstrip()==>It will remove spaces present at only right side of the string
There is no method like lrstrip().

    a= bool([])
    b= bool(())
    c= bool(range(0))
    d= bool({})
    e= bool(set())
	
	All are False !! 
	
	For Empty String, Empty List,Empty tuple,
	Empty set,Empty dict and range(0) arguments 
	bool() function returns False.
	
	
	>>> -2//7  ## -1

    >>> -3//7  ## -1

    >>>  3//7  ##  0
    >>> -7//7  ## -1
    >>> -14//7 ## -2

MODULO in Python
    Python Modulo in Practice: How to Use the % Operator
	https://realpython.com/python-modulo-operator/
	
	Python Floor Division
	https://www.pythontutorial.net/advanced-python/python-floor-division/
	
    1 Unlike JS, in Python, % takes the sign of Divisor!
	
	N = D * ( N // D) + (N % D) 
	
	>>> 10%(-3)
    -2
    >>> -10%3
    2
    >>> 10%-3
    -2
	
    >>> 10%0
    Traceback (most recent call last):
    File "<pyshell#12>", line 1, in <module>
      10%0
    ZeroDivisionError: integer division or modulo by zero
	
	Similar to int, the modulo operator used with a float will 
	return the remainder of division, but as a float value
	
IF in PYTHON
   if <expr>:
   <statement>  // statement is indented!!
   
   if /elif "short-circuits"
   
  Why are there no ++ and --​ operators in Python? 
  https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python
   
   
>>> import os
>>> print('My name is', os.getlogin(), 'and i am ', 41)
My name is thoma and i am  41

for in

The "for" statement is used to iterate over the elements of a sequence
(such as a string, tuple or list) or other iterable object:

   for_stmt ::= "for" target_list "in" expression_list ":" suite
                ["else" ":" suite]

The expression list is evaluated once; it should yield an iterable
object.

The "for" statement is used to iterate over the elements of a sequence
(such as a string, tuple or list) or other iterable object:

   for_stmt ::= "for" target_list "in" expression_list ":" suite
                ["else" ":" suite]

The expression list is evaluated once; it should yield an iterable
object.
you cannot directly specify the number of iterations to make, 
a halting condition, or the size of iteration step.

>>> for i,v in td.items():                         // note .items() !!
	print(f"the key is {i} and the value is {v}")

	
the key is name and the value is thomas
the key is address and the value is prosperous

Lists again python video

>>> mylist=['tom', 2, 3]
>>> del mylist[-1]

>>> [1,2,3] + [100,200,300]   // Note
[1, 2, 3, 100, 200, 300]
>>> [1,2,3]*10                // Note 
[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]

PEP stands for Python Enhancement Proposal. 
A PEP is a design document providing information to the Python community, 
or describing a new feature for Python or its processes or environment

Functional languages get their origin in mathematical logic and lambda calculus, 
while imperative programming languages embrace the state-based model of computation invented by Alan Turing.
The two models of computation, lambda calculus and Turing machines, can be translated into each another. 
This equivalence is known as the Church-Turing hypothesis.

>>> import dis
>>> add = lambda x,y: x+y
>>> type(add)
<class 'function'>
>>> dis.dis(add)
  1           0 LOAD_FAST                0 (x)
              2 LOAD_FAST                1 (y)
              4 BINARY_ADD
              6 RETURN_VALUE
			
Key functions in Python are higher-order functions that take a parameter key as a named argument. 
key receives a function that can be a lambda. 
This function directly influences the algorithm driven by the key function itself. 

>>> ids=['id1', 'id2', 'id30', 'id3', 'id22', 'id100']
>>> print(sorted(ids))
['id1', 'id100', 'id2', 'id22', 'id3', 'id30']
>>> sorted_ids=sorted(ids,key=lambda x: x[:2])
>>> print(sorted_ids)
['id1', 'id2', 'id30', 'id3', 'id22', 'id100']


LIST COMPREHENSIONS as alt to lambda 
    Intermediate Python
    Using List Comprehensions Effectively

    https://realpython.com/courses/using-list-comprehensions-effectively/
	
	
>>> list(map(lambda x: x.capitalize(), ['dog', 'cat', 'cow']))
['Dog', 'Cat', 'Cow']

>>> [x.capitalize() for x in ['dog', 'cat', 'cow']]
['Dog', 'Cat', 'Cow']


>>> list(filter(lambda x: x%2==0, range(11)))
[0, 2, 4, 6, 8, 10]

>>> [x for x in range(11) if x%2==0]
[0, 2, 4, 6, 8, 10]

list comprehension is short-hand for for-loop

Generalized list comprehension

(values) = [(expression) for (value) in (collection)]

TRANSFORMS to

values=[]
for (value) in (collection):
   (values).append( (expression ))
   
 GENERATOrS
 >>> str="Thomas"
>>> iter(str)
<str_iterator object at 0x0000019851DCC4C0>
>>> it=iter(str)
>>> next(it)
'T'
>>> next(it)
'h'
>>> next(it)
'o'

fibonacci genererator (McGrath, Kindle)

In file:
 def fibonacci_generator():
     a = b = 1
     while True:
         yield a
         a, b = b, b + a
		 
		 
INFINITE SEQUENCE GENERATOR 

   REF // (Real Python, generators)


	def infinite_sequence(start=0,stop=1000):
		num = start
		while True:
			if num >= stop:
				break
			yield num
			num += 1
		
	for i in infinite_series.infinite_sequence(20,40):   // infinite_series is file name
		print(i, end=" ")
		
	20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 


RELOAD MODULE
    import importlib
    importlib.reload(module)
	
COUNT NUMBER OF LINES IN CSV FIlE  
    REF // Real Python generators
	
	
	>>> row_count_one, row_count_two, row_count_three = 0,0,0
	
	
	MEMORY INTENSIVE METHOD 
		>>> csv_1000_one = csvtom.csv_reader("Sample1000.csv")

		>>> for x in csv_1000_one:
			row_count_one +=1
		
		>>> print(row_count_one)
		
		1001
		
	USE GENERATOR 
	
		>>> csv_1000_two = csvtom.csv_reader_alt("Sample1000.csv")
		>>> for x in csv_1000_two:
			row_count_two += 1

		>> print(row_count_two)
		1000
		
    GENERATOR EXPRESSION // (also called a generator comprehension)
	
		>>> csv_1000_three =(row for row in csvtom.csv_reader_alt("Sample1000.csv"))
		>>> for x in csv_1000_three:
			row_count_three += 1
		
		>>> print(row_count_three)
		1000
		
	Generator expression allows creating a generator without a yield keyword	
	    https://www.geeksforgeeks.org/generator-expressions/
		
	mygen = (num ** 2 for num in range(10))
	
	    >>> for x in mygen:
	    print(x, end = ' ')
	
        0 1 4 9 16 25 36 49 64 81 
		
		
		Generator functions look and act just like regular functions, but with one defining characteristic. 
		Generator functions use the Python yield keyword instead of return. 
		
		The state of the function is remembered. 
		That way, when next() is called on a generator object 
		(either explicitly or implicitly within a for loop),
		the previously yielded variable num is incremented, 
		and then yielded again. 

LIST COMPREHENSIONS vs GENERATOR EXPRESSION (GENERATOR COMPREHENSHIONS) COMPARISON

    >>> numbers_squared_lc = [num **2 for num in range(10)]  // Note syntax similarites // this and next line
	>>> numbers_squared_gc = (num **2 for num in range(10))
	
	>>> numbers_squared_lc
	[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	>>> numbers_squared_gc
	<generator object <genexpr> at 0x000002E6B94B1350>
	
	>>> for x in numbers_squared_gc:
		print(x, end = " ")
		
	0 1 4 9 16 25 36 49 64 81 
	
GENERATORS ARE VERY MEMORY EFFICIENT  // getsizeof

    >>> import sys
    >>> numbered_squared_lc_big = [i ** 2 for i in range(10000)]
    >>> sys.getsizeof(numbered_squared_lc_big)
    85176
    >>> numbered_squared_gc_big =(i ** 2 for i in range(10000))
    >>> print(sys.getsizeof(numbered_squared_gc_big))
    112

CSV  BIG FILE COUNT LINES
    
	>>> rn1,rn2 = 0,0

    >>> import csvtom
    >>> filebig = csvtom.csv_reader("samplecsv20k.csv")
	
	>>> for x in filebig:
	rn1 += 1
	
	>>> print(rn1)
	19628
	
	>>> genbig = csvtom.csv_reader_alt("samplecsv20k.csv")
	>>> genbig
	<generator object csv_reader_alt at 0x0000021988EE63C0>
	>>> for i in genbig:
		rn2 += 1
	
	>>> print(rn2)
	19627

	>>> gen3 =(row for row in csvtom.csv_reader_alt("samplecsv20k.csv"))
	>>> print(gen3)
	<generator object <genexpr> at 0x00000219894A3040>
	
	>>> rn3=0
	>>> for x in gen3:
	rn3 +=1

	>>> print(rn3)
	19627

	>>> import sys
	>>> sys.getsizeof(filebig)
	173336
	
	>>> sys.getsizeof(genbig)
	112
	
	
List comprehension vs generator comprehension // again // real python generators

	If the list is smaller than the running machine’s available memory, 
	then list comprehensions can be faster to evaluate than the 
	equivalent generator expression. 
	
	In contrast, the list is over 700 times larger than the generator object!

	import cProfile

	>>>cProfile.run('sum([i * 2 for i in range(10000)])')
         5 function calls in 0.027 seconds
		 
	Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001    0.001    0.001 <string>:1(<listcomp>)
        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
        1    0.026    0.026    0.027    0.027 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
		
	>>> cProfile.run('sum((i * 2 for i in range(10000)))')
         10005 function calls in 0.009 seconds

	Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    10001    0.001    0.000    0.001    0.000 <string>:1(<genexpr>)
        1    0.000    0.000    0.009    0.009 <string>:1(<module>)
        1    0.000    0.000    0.009    0.009 {built-in method builtins.exec}
        1    0.008    0.008    0.009    0.009 {built-in method builtins.sum}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
		
	summing across all values in the list comprehension took about a third of the time as summing across the generator. 
	If speed is an issue and memory isn’t, then a list comprehension is likely a better tool for the job.

YIELD // real python generators
	yield is a fairly simple statement
	Its primary job is to control the flow of a generator function in a way 
	that’s similar to return statements
	the Python yield statement has a few tricks up its sleeve.
	When you call a generator function or use a generator expression, 
	you return a special iterator called a generator
	ou can assign this generator to a variable in order to use it. 
	When you call special methods on the generator, such as next(), 
	the code within the function is executed up to yield.
	
	When the Python yield statement is hit, the program suspends function execution
	and returns the yielded value to the caller. 
	(In contrast, return stops function execution completely.) 
	When a function is suspended, the state of that function is saved
	This includes any variable bindings local to the generator, the instruction pointer, 
	the internal stack, and any exception handling.
	This allows you to resume function execution whenever you call one of the generator’s methods. 
	In this way, all function evaluation picks back up right after yield
	
	>>> def multi_yield():
		yield_str="This will print the first string"
		yield yield_str
		yield_str="This will print the second string"
		yield yield_str
	
	>>> multi_obj = multi_yield()
	>>> print(next(multi_obj))
	This will print the first string
	>>> print(next(multi_obj))
	This will print the second string
	>>> print(next(multi_obj))
	Traceback (most recent call last):
	  File "<pyshell#9>", line 1, in <module>
		print(next(multi_obj))
	StopIteration
	
	Take a closer look at that last call to next(). 
	You can see that execution has blown up with a traceback. 
	Unless your generator is infinite, you can iterate through it one time onlys
	
GREAT REF ON GENERATORS AND COROUTINES 

   A Curious Course on Coroutines and Concurrency
   http://www.dabeaz.com/coroutines/
   http://www.dabeaz.com/coroutines/Coroutines.pdf
   
   
 PALIDROME // RealPython
 
 def is_palidrome(num):
    # skip single-digit inputs
    if num // 10 == 0:
        return False
    temp=num
    reverse_num = 0
    
    while temp != 0:
        reverse_num = (reverse_num * 10) + (temp %10)
        temp= temp // 10
    
    if num == reverse_num:
        return num
    else:
        return False
		
--- 

def myseq(start=0, stop=1000):
    num =start
    while True:
        if num > stop :
            break
        yield num
        num +=1      
		
---

for x in myseq():
   # pal = is_palidrome(x)
    if is_palidrome(x):
        print(x, end = ',')

---
11,22,33,44,55,66,77,88,99,101,111,121,131,141,151,...

---
def is_palli_two (num):
    if num // 10 == 0:
        return False
    temp = num
    num_reversed = 0
    while temp != 0:
        num_reversed = (num_reversed * 10) + (temp % 10)
        temp = temp // 10
    if num == num_reversed:
        return True
    else:
        return False
        
--- 

def infinite_palidromes():
    num = 0
    while True:
        if is_palli_two(num):
            i = (yield num)
            if i is not None:
                num = i
        num += 1
           
--- 

pal_gen = infinite_palidromes()

--- 

print(next(pal_gen))
>>> 11		   

pal_gen.send(1221)
>>>1331

EXCEPTIONS
    REF
    https://docs.python.org/3/library/exceptions.html
	
MODULES

import dog
	from dog import *
	from dog import bark, lick, wag

	// module name: .py is dropped // note

	help()
	// now
	sys
	// must know

	import sys, keyword

SYS
    sys.version
	sys.executable  // python interpretor location
	
	>>> for word in keyword.kwlist:
		print(word, end=',')

		
	False,None,True,__peg_parser__,and,as,
	assert,async,await,break,class,continue,
	def,del,elif,else,except,finally,for,from,
	global,if,import,in,is,lambda,nonlocal,not,or,
	pass,raise,return,try,while,with,yield,
		
MATH

RANDOM
    import random as r
    r.sample(sequence, k) // k IS REQUIRED 	
	
	r.random // floating point number between 0 and 1.0
	
DECIMAL

    from decimal import *

DATETIME

>>> for attr in \
    ['year', 'month', 'day', 'hour', 'minute', 'second', 'microsecond']:
	print(f"The {attr} is {getattr(datetime.today(), attr)}")

	
The year is 2020
The month is 12
The day is 21
The hour is 11
The minute is 0
The second is 48
The microsecond is 101150
	
	